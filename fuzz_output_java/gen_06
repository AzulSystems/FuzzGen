import java.util.Random;
import java.util.Arrays;
 class FuzzUtils { 
 public static Random random = new Random(1);
 public static long seed = 1L;
 public static int UnknownZero = 0;
 public static void init(int[] a, int seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(short[] a, short seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = (short)(((j % 2 == 0) ? seed + j : seed - j)); 
   }
 }
 public static void init(byte[] a, byte seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = (byte)(((j % 2 == 0) ? seed + j : seed - j)); 
   }
 }
 public static void init(long[] a, long seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(float[] a, float seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(double[] a, double seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(Integer[] a, Integer seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(Short[] a, Short seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = Short.valueOf((short)((j % 2 == 0) ? seed + j : seed - j)); 
   }
 }
 public static void init(Byte[] a, Byte seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = Byte.valueOf((byte)((j % 2 == 0) ? seed + j : seed - j)); 
   }
 }
 public static void init(Long[] a, Long seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(Float[] a, Float seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(Double[] a, Double seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 } 
 class AnotherClass { 
     public int field;
     public void meth() {field = 1;} 
 } 
 class Test{ 
public static Double DoubleFieldVar_0 = -14.999853999094356D; 
public static double doubleFieldVar_1 = -85.29334471506749D; 
 static  double doubleArrayFieldVar_2[]  = new double [500];
static { 
FuzzUtils.init(doubleArrayFieldVar_2, 19.322840721226186D);
 } 
 static  int intArrayFieldVar_3[]  = new int [500];
static { 
FuzzUtils.init(intArrayFieldVar_3, -96);
 } 
public long checksumCollectionVarsMethodint(  int[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  valuesList[i][j]; 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodshort(  short[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  valuesList[i][j]; 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodbyte(  byte[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  valuesList[i][j]; 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodlong(  long[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  valuesList[i][j]; 
    } 
 } 
 return sum; 

 } 
public double checksumCollectionVarsMethodfloat(  float[][] valuesList) { 
double sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  ( valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public double checksumCollectionVarsMethoddouble(  double[][] valuesList) { 
double sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  ( valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodInteger(  Integer[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodShort(  Short[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodByte(  Byte[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodLong(  Long[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public double checksumCollectionVarsMethodFloat(  Float[][] valuesList) { 
double sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j].doubleValue()); 
    } 
 } 
 return sum; 

 } 
public double checksumCollectionVarsMethodDouble(  Double[][] valuesList) { 
double sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j].doubleValue()); 
    } 
 } 
 return sum; 

 } 
void printVarsMethod ( String idStr, int[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, short[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, byte[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, long[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, float[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, double[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Integer[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Short[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Byte[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Long[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Float[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Double[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_int ( String idStr, int[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodint(new int[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_short ( String idStr, short[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodshort(new short[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_byte ( String idStr, byte[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodbyte(new byte[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_long ( String idStr, long[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodlong(new long[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_float ( String idStr, float[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodfloat(new float[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_double ( String idStr, double[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethoddouble(new double[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Integer ( String idStr, Integer[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodInteger(new Integer[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Short ( String idStr, Short[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodShort(new Short[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Byte ( String idStr, Byte[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodByte(new Byte[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Long ( String idStr, Long[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodLong(new Long[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Float ( String idStr, Float[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodFloat(new Float[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Double ( String idStr, Double[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodDouble(new Double[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
 public int method_int_int_4 (  int intVal_5 ) { 
 final  int intArrayVal_6[]  = new int [500];
FuzzUtils.init(intArrayVal_6, intVal_5);

Double DoubleVar_7 = -73.59801586565955D; 

int intVar_8 = -11437; 

 long longArrayVar_9[]  = new long [500];
FuzzUtils.init(longArrayVar_9, -9223372036854775808L);

 float floatArrayVar_10[]  = new float [500];
FuzzUtils.init(floatArrayVar_10, 30.690063085606653F);

AnotherClass AnotherClassObjVar_11 = new AnotherClass();

 int intArrayVar_12[]  = new int [500];
FuzzUtils.init(intArrayVar_12, -1);

 double doubleArrayVar_13[]  = new double [500];
FuzzUtils.init(doubleArrayVar_13, 739711.121713667D);

 Float FloatArrayVar_14[]  = new Float [500];
FuzzUtils.init(FloatArrayVar_14, -21.804695341345152F);

Double DoubleVar_15 = 94.02775640303469D; 

boolean booleanVar_16 = true; 

int intVar_17 = -32181; 

 long longArrayVar_18[]  = new long [500];
FuzzUtils.init(longArrayVar_18, -70L);

boolean booleanVar_19 = true; 

Short ShortVar_20 = -55; 

long longVar_21 = 2147483691L; 

Boolean BooleanVar_22 = false; 

 short shortArrayVar_23[]  = new short [500];
FuzzUtils.init(shortArrayVar_23, (short)(-163));

final short shortVal_24 = -169; 

 Integer IntegerArrayVar_25[]  = new Integer [500];
FuzzUtils.init(IntegerArrayVar_25, 650);

boolean booleanVar_26 = false; 

int intVar_27 = 9762; 

 int intIndArraySafeVar_28 =  1 ; 
do { 
 switch (( intVar_27 + intArrayVar_12[intIndArraySafeVar_28 ] )) {
               default : if ( booleanVar_19 ) { 
 switch (Test.intArrayFieldVar_3[intIndArraySafeVar_28 ]) {
          case -3:  long longIndArraySafeVar_29 =  1 ; 
do { 
 byte byteIndVar_30 = 47; 
 while ( byteIndVar_30 <= 7 ) { 
intVar_17 = ++intVar_8; 
 synchronized(AnotherClassObjVar_11) {
ShortVar_20 = Short.valueOf((short)ShortVar_20); 
 intVar_8 %= ( intArrayVar_12[intIndArraySafeVar_28 ] + intVar_17 ); 
 intVar_27 -= --intVar_8; 
 } 
 
--byteIndVar_30; 

 } 
  byte byteIndArraySafeVar_31 = 42; 
do { 
intVar_27 = ( intArrayVar_12[intIndArraySafeVar_28 ] * ( Test.intArrayFieldVar_3[byteIndArraySafeVar_31 ] - intVar_27 ) ); 
 
byteIndArraySafeVar_31 = (byte)(byteIndArraySafeVar_31 -  2 ); 

 }  while ( byteIndArraySafeVar_31 >=  0  + 2 ); 
 intVar_17 += intVar_17++; 
 
longIndArraySafeVar_29++; 

 }  while ( longIndArraySafeVar_29 <  0  + 62 ); 
      break; 
     case -2:  long longUnknownZeroVar_32 = FuzzUtils.UnknownZero;
 for (  long longIndArraySafeVar_33 = 87; 
longIndArraySafeVar_33 <  1  + longUnknownZeroVar_32 * ( Math.max(longArrayVar_9[(int)longIndArraySafeVar_33 ], longArrayVar_18[intIndArraySafeVar_28 ]) + longArrayVar_9[intIndArraySafeVar_28 ] ) ; longIndArraySafeVar_33 = longIndArraySafeVar_33 -  3  ) { 

 } 
      break; 
     case 0:  long longUnknownZeroVar_34 = FuzzUtils.UnknownZero;
 long longIndVar_35 = 55; 
 while ( longIndVar_35 <= -2 + longUnknownZeroVar_34 * ( (long)(intVar_8) & ( 2147483698L << -84L ) ) ) { 
 long longIndArraySafeVar_36 = 90; 
do { 
intVar_8 += intArrayVar_12[ Math.min( Math.abs(( ( intArrayVar_12[intIndArraySafeVar_28 ] + Test.intArrayFieldVar_3[intIndArraySafeVar_28 ] ) ) / 2 ), ( 326  )) ]; 
 
longIndArraySafeVar_36 = longIndArraySafeVar_36 -  4 ; 

 }  while ( longIndArraySafeVar_36 >=  0  + 6 ); 
 intArrayVar_12 = Arrays.copyOf(intArrayVar_12, 488);
 
longIndVar_35--; 

 } 
      break; 
     case 2:  for (  byte byteIndVar_37 = 82; 
byteIndVar_37 < 8 ; --byteIndVar_37 ) { 

 } 
      break; 
     case 5: intVar_17 = ( Test.intArrayFieldVar_3[intIndArraySafeVar_28 ] + intVar_27 ); 
      break; 
     case 6:  long longIndArraySafeVar_38 =  1 ; 
 while ( longIndArraySafeVar_38 < 83 ) { 

++longIndArraySafeVar_38; 

 } 
      break; 
     case 8:  for (  byte byteIndVar_39 =  1 ; 
byteIndVar_39 <= 60 ; byteIndVar_39 = (byte)(byteIndVar_39 +  4 ) ) { 

 } 
      break; 
     case 10: intVar_8 ^= ( Test.intArrayFieldVar_3[intIndArraySafeVar_28 ] | ( Test.intArrayFieldVar_3[intIndArraySafeVar_28 ] + intVar_17 ) ); 
      break; 
     case 13:  byte byteIndArraySafeVar_40 =  1 ; 
 while ( byteIndArraySafeVar_40 < 85 ) { 

++byteIndArraySafeVar_40; 

 } 
      break; 
     case 15:  for (  long longIndVar_41 = 65; 
longIndVar_41 <= -2 ; longIndVar_41 = longIndVar_41 -  2  ) { 

 } 
      break; 
     case 17:  short shortUnknownZeroVar_42 = (short)(FuzzUtils.UnknownZero);
 for (  short shortIndArraySafeVar_43 = 33; 
shortIndArraySafeVar_43 != 5 + shortUnknownZeroVar_42 * shortArrayVar_23[shortIndArraySafeVar_43 ] ; shortIndArraySafeVar_43 = (short)(shortIndArraySafeVar_43 - 1) ) { 

 } 
      break; 
     case 19:  for (  short shortIndArraySafeVar_44 =  1 ; 
shortIndArraySafeVar_44 < 71 ; ++shortIndArraySafeVar_44 ) { 

 } 
      break; 
     case 21: Test.intArrayFieldVar_3 = Arrays.copyOf(intArrayVal_6, 451);
      break; 
     case 23: synchronized(AnotherClassObjVar_11) {
} 
      case 25:  for (  long longIndArraySafeVar_45 = 67; 
longIndArraySafeVar_45 <  1  ; --longIndArraySafeVar_45 ) { 

 } 
      break; 
     case 27: intVar_27 += intArrayVar_12[intIndArraySafeVar_28 ]; 
      break; 
     case 28: intVar_17 *= intVar_8; 
      break; 
     case 31:  short shortUnknownZeroVar_46 = (short)(FuzzUtils.UnknownZero);
 for (  short shortIndArraySafeVar_47 = 54; 
shortIndArraySafeVar_47 <  1  + shortUnknownZeroVar_46 * shortIndArraySafeVar_47 ; shortIndArraySafeVar_47-- ) { 

 } 
      break; 
     case 33:  short shortIndVar_48 = 80; 
 while ( shortIndVar_48 <  1  ) { 

shortIndVar_48 = (short)(shortIndVar_48 -  3 ); 

 } 
      case 34:  for (  byte byteIndArraySafeVar_49 = 79; 
byteIndArraySafeVar_49 <  1  ; --byteIndArraySafeVar_49 ) { 

 } 
      break; 
     case 37:  for (  long longIndArraySafeVar_50 = 76; 
longIndArraySafeVar_50 <=  1  ; --longIndArraySafeVar_50 ) { 

 } 
      break; 
     case 39:  byte byteIndVar_51 = -2; 
 while ( byteIndVar_51 < 48 ) { 

byteIndVar_51++; 

 } 
      break; 
     case 41:  for (  short shortIndVar_52 = 45; 
shortIndVar_52 <=  1  ; shortIndVar_52-- ) { 

 } 
      case 43: intVar_8 = intIndArraySafeVar_28; 
      break; 
     case 44:  long longIndArraySafeVar_53 = 6; 
do { 

++longIndArraySafeVar_53; 

 }  while ( longIndArraySafeVar_53 <  0  + 68 ); 
      break; 
     case 46: booleanVar_19 = booleanVar_26; 
      break; 
     case 49:  byte byteIndVar_54 = 75; 
do { 

byteIndVar_54--; 

 }  while ( byteIndVar_54 >  0  +  1  ); 
      break; 
     case 51:  byte byteIndVar_55 = 51; 
do { 

byteIndVar_55--; 

 }  while ( byteIndVar_55 >=  0  +  1  ); 
      break; 
     case 52: intVar_27 = ( intVar_27 + intArrayVar_12[intIndArraySafeVar_28 ] ); 
      case 55:  for (  int intIndVar_56 = 58; 
intIndVar_56 <=  1  ; --intIndVar_56 ) { 

 } 
      break; 
     case 56: intVar_27 *= ( ( intArrayVar_12[intIndArraySafeVar_28 ] + intArrayVar_12[intIndArraySafeVar_28 ] ) + ( intArrayVar_12[intIndArraySafeVar_28 ] - intArrayVar_12[intIndArraySafeVar_28 ] ) ); 
      break; 
     case 59:  int intIndArraySafeVar_57 = 43; 
 while ( intIndArraySafeVar_57 <  1  ) { 

--intIndArraySafeVar_57; 

 } 
      break; 
     case 61: synchronized(AnotherClassObjVar_11) {
} 
      break; 
          default : try { 

} catch (Exception exVar_58 ) {
//  System.out.println(exVar_58.getClass().getCanonicalName());  
} 
  }
 
 } 
  }
 
intIndArraySafeVar_28++; 

 }  while ( intIndArraySafeVar_28 <=  0  + 179/* LOOP_CNT_UPPER_LIMIT_ARRAY_SAFE_VAR_LONG_LOOP */ ); 
 return ( int )( (0 + 
  ( intVar_8 + intVar_17 + intVar_27 ) +   ( intVal_5 ) +    checksumCollectionVarsMethodint( new int[][]{intArrayVar_12}) +    checksumCollectionVarsMethodint( new int[][]{intArrayVal_6}) +  0
 + 
  ( shortVal_24 ) +    checksumCollectionVarsMethodshort( new short[][]{shortArrayVar_23}) +  0
 + 
 0
 + 
  ( longVar_21 ) +    checksumCollectionVarsMethodlong( new long[][]{longArrayVar_9,longArrayVar_18}) +  0
 + 
   checksumCollectionVarsMethodfloat( new float[][]{floatArrayVar_10}) +  0
 + 
   checksumCollectionVarsMethoddouble( new double[][]{doubleArrayVar_13}) +  0
 + 
   checksumCollectionVarsMethodInteger( new Integer[][]{IntegerArrayVar_25}) +  0
 + 
  ( ShortVar_20 ) +  0
 + 
 0
 + 
 0
 + 
   checksumCollectionVarsMethodFloat( new Float[][]{FloatArrayVar_14}) +  0
 + 
  ( DoubleVar_7 + DoubleVar_15 ) +  0
 + 
  0) ); 

 } 

 public double method_double_double_59 (  double doubleVal_60 ) { 
float floatVar_61 = 0.21860516061256607F; 

long longVar_62 = 2147483697L; 

long longVar_63 = -5852L; 

 double doubleArrayVar_64[]  = new double [500];
FuzzUtils.init(doubleArrayVar_64, -132513.88751559495D);

int intVar_65 = 76; 

 final  Byte ByteArrayVal_66[]  = new Byte [500];
FuzzUtils.init(ByteArrayVal_66, Byte.valueOf((byte)-124));

 Byte ByteArrayVar_67[]  = new Byte [500];
FuzzUtils.init(ByteArrayVar_67, Byte.valueOf((byte)-54));

int intVar_68 = -2147483644; 

 Float FloatArrayVar_69[]  = new Float [500];
FuzzUtils.init(FloatArrayVar_69, -0.17628855926209241F);

 long longArrayVar_70[]  = new long [500];
FuzzUtils.init(longArrayVar_70, longVar_63);

 int intArrayVar_71[]  = new int [500];
FuzzUtils.init(intArrayVar_71, intVar_68);

 long longArrayVar_72[]  = new long [500];
FuzzUtils.init(longArrayVar_72, longVar_62);

 int intArrayVar_73[]  = new int [500];
FuzzUtils.init(intArrayVar_73, intVar_65);

short shortVar_74 = -16; 

long longVar_75 = 27774L; 

byte byteVar_76 = -125; 

float floatVar_77 = 16.580129373122617F; 

float floatVar_78 = -0.48658095319190053F; 

 float floatArrayVar_79[]  = new float [500];
FuzzUtils.init(floatArrayVar_79, floatVar_77);

boolean booleanVar_80 = false; 

final boolean booleanVal_81 = false; 

 int intArrayVar_82[]  = new int [500];
FuzzUtils.init(intArrayVar_82, intVar_65);

 double doubleArrayVar_83[]  = new double [500];
FuzzUtils.init(doubleArrayVar_83, 38.56433345334631D);

final int intVal_84 = -120; 

float floatVar_85 = 16.070617123020895F; 

 final  float floatArrayVal_86[]  = new float [500];
FuzzUtils.init(floatArrayVal_86, floatVar_77);

int intVar_87 = -24; 

floatVar_78 += floatVar_78; 
  long longIndVar_88 = 56; 
do { 
if ( ( ( ( 953315.5563308331D + -782.9104237962922D ) - -51.890408816848435D )  <  ( doubleVal_60 - doubleVal_60 ) ) ) { 
intArrayVar_71 = intArrayVar_82; 
 if ( ( -128  <  ( ( 126 + -126 ) + ( -125 - byteVar_76 ) ) ) ) { if ( (((booleanVal_81) ? (!( floatVar_85  ==  --floatArrayVar_79[(intVar_87 >>> 1) % 364] )) : ( ( -180 - ( 5 - -188 ) )  >=  96 ) && true)) ? java.util.Arrays.equals(intArrayVar_71, intArrayVar_71) : ( ( ( -1.745824569091809F - -917.6352523996229F ) + -0.5982669896010417F )  >=  -340.40162364481193F ) ) {  long longUnknownZeroVar_89 = FuzzUtils.UnknownZero;
 long longIndArraySafeVar_90 = 79; 
 while ( longIndArraySafeVar_90 <  1  + longUnknownZeroVar_89 * longArrayVar_72[(int)longIndArraySafeVar_90 ] ) { 
longVar_62 >>= -2147483656L; 
 
longIndArraySafeVar_90 = longIndArraySafeVar_90 -  4 ; 

 } 
  } else {  for (  long longIndArraySafeVar_91 = 88; 
longIndArraySafeVar_91 < 4 ; --longIndArraySafeVar_91 ) { 
floatVar_78 = floatVar_78; 
 longArrayVar_72 = longArrayVar_70; 
 floatArrayVar_79 = floatArrayVar_79; 
 intArrayVar_71 = intArrayVar_73; 
 floatVar_78 += ( floatArrayVar_79[(int)longIndArraySafeVar_91 ] - floatArrayVar_79[(int)longIndArraySafeVar_91 ] ); 
 intVar_65 *= ( intArrayVar_73[(int)longIndArraySafeVar_91 ] + ( intArrayVar_71[(int)longIndArraySafeVar_91 ] - intArrayVar_71[(int)longIndArraySafeVar_91 ] ) ); 
 
 } 
  } 
  } else { if ( false ) { 
intArrayVar_82 = intArrayVar_71; 
  for (  long longIndVar_92 = -2; 
longIndVar_92 <= 89 ; longIndVar_92++ ) { 

 } 
  byte byteUnknownZeroVar_93 = (byte)(FuzzUtils.UnknownZero);
 byte byteIndVar_94 =  1 ; 
do { 

byteIndVar_94++; 

 }  while ( byteIndVar_94 <  0  + byteUnknownZeroVar_93 * ( byteVar_76 - byteVar_76 ) + 57 ); 
 
 } else if ( ( ( 2147483644 + 94 )  <=  ( 432805305 - -2147483642 ) ) ) { longVar_75 -= ( longVar_75 ^ longVar_75 ); 
  } else {  System.arraycopy(intArrayVar_71, 90, intArrayVar_71, 69, 13);
  } 
  } 
 
 } else if ( ( Math.min(21.294003945800725D, ( -39.31642041079713D / -636.9427208470099D ))  ==  ( 59.2496403918627D - -4.571477449031633D ) ) ) { if ( (( 94.33234539533385D  >  ( -383.4107671500815D + ( -39.31751996221142D - 81.71751045053492D ) ) ) && ( -98  !=  -89 )) ) { 

 } 
  } else { if ( booleanVal_81 ) { 

 } else { 

 } 
  } 
 
longIndVar_88 = longIndVar_88 -  5 ; 

 }  while ( longIndVar_88 >  0  + 5 ); 
 return ( double )((double)(longArrayVar_72[(method_int_int_4 ( intVar_65 ) >>> 1) % 349]--)); 

 } 

  public void mainTest(String[] strArr1) { 
double doubleVar_95 = -69165.91811541654D; 

 Long LongArrayVar_96[]  = new Long [500];
FuzzUtils.init(LongArrayVar_96, -29841L);

boolean booleanVar_97 = false; 

byte byteVar_98 = -125; 

final Boolean BooleanVal_99 = false; 

boolean booleanVar_100 = true; 

long longVar_101 = -527824774L; 

 int intUnknownZeroVar_102 = FuzzUtils.UnknownZero;
 int intIndVar_103 = 55; 
 while ( intIndVar_103 <  1  + intUnknownZeroVar_102 * ( 11103 + intIndVar_103 ) ) { 
 byte byteUnknownZeroVar_104 = (byte)(FuzzUtils.UnknownZero);
 byte byteIndVar_105 = 59; 
 while ( byteIndVar_105 <= -2 + byteUnknownZeroVar_104 * byteVar_98 ) { 
doubleVar_95 -= doubleVar_95; 
 if ( booleanVar_100 ) { if ( ( 37.125950094878874F  ==  -705922.6586464527F ) ) { 
if ( ( Math.min(-710534718L, LongArrayVar_96[(-86 >>> 1) % 357]++)  <  -2147483674L ) ) { byteVar_98 -= (byte)(byteIndVar_105); 
  } else { byteVar_98 -= (byte)(byteVar_98); 
  } 
 if ( ( ( 1 + 123 )  >=  ( -85 + 123 ) ) ) { byteVar_98 += (byte)(byteVar_98); 
  } else { longVar_101 ^= longVar_101; 
  } 
 doubleVar_95 -= doubleVar_95; 
 longVar_101 = Math.abs(-13239L); 
 longVar_101 -= longVar_101; 
 Test.doubleFieldVar_1 = Test.doubleFieldVar_1; 
 if ( ( (double)(2147483640)  <=  545.9544172902279D ) ) { doubleVar_95 -= doubleVar_95; 
  } else { longVar_101 += longVar_101; 
  } 
 longVar_101 += 2147483696L; 
 if ( booleanVar_100 ) { 

 } else if ( ( (float)(doubleVar_95)  <=  ( 903.160710909084F + ( -0.8049340093135611F - 0.3550432026221666F ) ) ) ) { Test.intArrayFieldVar_3 = Arrays.copyOf(intArrayFieldVar_3, 462);
  } else { byteVar_98 += (byte)(( -51 + byteVar_98 )); 
  } 
 
 } 
  } else { longVar_101 = ( longVar_101 + longVar_101 ); 
  } 
 
byteIndVar_105 = (byte)(byteIndVar_105 -  5 ); 

 } 
 
intIndVar_103 = intIndVar_103 -  5 ; 

 } 
 int intVal_106 = method_int_int_4 ( ((( ( -45 + 44 )  ==  -13801 )) ? 33 : 94 ) ); 
 double doubleVal_107 = method_double_double_59 ( method_double_double_59 ( doubleVar_95 ) ); 
 int intVal_108 = method_int_int_4 ( intVal_106 ); 
 double doubleVal_109 = method_double_double_59 ( doubleVar_95 ); 
 double doubleVal_110 = method_double_double_59 ( ((true) ? ( doubleVar_95 * doubleVal_107 ) : Test.doubleFieldVar_1 ) ); 
 double doubleVal_111 = method_double_double_59 ( doubleVar_95 ); 
 int intVal_112 = method_int_int_4 ( intVal_108 ); 
 double doubleVal_113 = method_double_double_59 ( Test.doubleFieldVar_1 ); 
 int intVal_114 = method_int_int_4 ( intVal_108 ); 
 printVarsMethod(" intVal_106,intVal_108,intVal_112,intVal_114", new int[]{ intVal_106,intVal_108,intVal_112,intVal_114 }); 
printCollectionVarsMethod_int(" intArrayFieldVar_3", new int[][]{ intArrayFieldVar_3  }); 
printVarsMethod(" byteVar_98", new byte[]{ byteVar_98 }); 
printVarsMethod(" longVar_101", new long[]{ longVar_101 }); 
printVarsMethod(" doubleVar_95", new double[]{ doubleVar_95 }); 
printVarsMethod(" doubleVal_107,doubleVal_109,doubleVal_110,doubleVal_111,doubleVal_113", new double[]{ doubleVal_107,doubleVal_109,doubleVal_110,doubleVal_111,doubleVal_113 }); 
printVarsMethod(" doubleFieldVar_1", new double[]{ doubleFieldVar_1 }); 
printCollectionVarsMethod_double(" doubleArrayFieldVar_2", new double[][]{ doubleArrayFieldVar_2  }); 
printCollectionVarsMethod_Long(" LongArrayVar_96", new Long[][]{ LongArrayVar_96  }); 
printVarsMethod(" DoubleFieldVar_0", new Double[]{ DoubleFieldVar_0 }); 
}
 public static void main(String[] args) { 
   try {
   Test _instance = new Test(); 
      for (int i = 0; i < 1000; i++ ) { 
            _instance.mainTest(args); 
       }
   } catch (Exception ex) {
        System.out.println(ex.getClass().getCanonicalName()); 
    } 
}
 } 

