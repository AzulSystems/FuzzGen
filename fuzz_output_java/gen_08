import java.util.Random;
import java.util.Arrays;
 class FuzzUtils { 
 public static Random random = new Random(1);
 public static long seed = 1L;
 public static int UnknownZero = 0;
 public static void init(int[] a, int seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(short[] a, short seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = (short)(((j % 2 == 0) ? seed + j : seed - j)); 
   }
 }
 public static void init(byte[] a, byte seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = (byte)(((j % 2 == 0) ? seed + j : seed - j)); 
   }
 }
 public static void init(long[] a, long seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(float[] a, float seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(double[] a, double seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(Integer[] a, Integer seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(Short[] a, Short seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = Short.valueOf((short)((j % 2 == 0) ? seed + j : seed - j)); 
   }
 }
 public static void init(Byte[] a, Byte seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = Byte.valueOf((byte)((j % 2 == 0) ? seed + j : seed - j)); 
   }
 }
 public static void init(Long[] a, Long seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(Float[] a, Float seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 public static void init(Double[] a, Double seed) { 
   for (int j = 0; j < a.length; j++) { 
        a[j] = ((j % 2 == 0) ? seed + j : seed - j); 
   }
 }
 } 
 class AnotherClass { 
     public int field;
     public void meth() {field = 1;} 
 } 
 class Test{ 
 static  Float FloatArrayFieldVar_0[]  = new Float [500];
static { 
FuzzUtils.init(FloatArrayFieldVar_0, -0.7262196727538215F);
 } 
public static float floatFieldVar_1 = -41.64452748103602F; 
 static  long longArrayFieldVar_2[]  = new long [500];
static { 
FuzzUtils.init(longArrayFieldVar_2, -16316L);
 } 
public static Float FloatFieldVar_3 = -93.67425926398465F; 
public long checksumCollectionVarsMethodint(  int[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  valuesList[i][j]; 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodshort(  short[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  valuesList[i][j]; 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodbyte(  byte[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  valuesList[i][j]; 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodlong(  long[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  valuesList[i][j]; 
    } 
 } 
 return sum; 

 } 
public double checksumCollectionVarsMethodfloat(  float[][] valuesList) { 
double sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  ( valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public double checksumCollectionVarsMethoddouble(  double[][] valuesList) { 
double sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum +=  ( valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodInteger(  Integer[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodShort(  Short[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodByte(  Byte[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public long checksumCollectionVarsMethodLong(  Long[][] valuesList) { 
long sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j]); 
    } 
 } 
 return sum; 

 } 
public double checksumCollectionVarsMethodFloat(  Float[][] valuesList) { 
double sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j].doubleValue()); 
    } 
 } 
 return sum; 

 } 
public double checksumCollectionVarsMethodDouble(  Double[][] valuesList) { 
double sum = 0; 
 for (int i = 0; i < valuesList.length; i++) { 
 for (int j = 0; j < valuesList[i].length; j++)  { 
 sum =  (sum + valuesList[i][j].doubleValue()); 
    } 
 } 
 return sum; 

 } 
void printVarsMethod ( String idStr, int[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, short[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, byte[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, long[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, float[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, double[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Integer[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Short[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Byte[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Long[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Float[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printVarsMethod ( String idStr, Double[] valuesList ) { 
String[] idsArray = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsArray[currIndex]).append(" "); 
sbValue.append(valuesList[currIndex]).append(" "); 
} 
sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_int ( String idStr, int[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodint(new int[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_short ( String idStr, short[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodshort(new short[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_byte ( String idStr, byte[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodbyte(new byte[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_long ( String idStr, long[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodlong(new long[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_float ( String idStr, float[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodfloat(new float[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_double ( String idStr, double[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethoddouble(new double[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Integer ( String idStr, Integer[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodInteger(new Integer[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Short ( String idStr, Short[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodShort(new Short[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Byte ( String idStr, Byte[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodByte(new Byte[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Long ( String idStr, Long[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodLong(new Long[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Float ( String idStr, Float[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodFloat(new Float[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
void printCollectionVarsMethod_Double ( String idStr, Double[][] valuesList ) { 
String[] idsCollection = idStr.split(","); 
StringBuilder sbId = new StringBuilder(); 
StringBuilder sbValue = new StringBuilder(); 
for (int currIndex = 0; currIndex < valuesList.length; currIndex++) { 
  if (currIndex % 3 == 0 && currIndex != 0) { 
    sbId.append("= "); 
System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 
} 
sbId.append(idsCollection[currIndex]).append(" "); 
          sbValue.append(checksumCollectionVarsMethodDouble(new Double[][]{valuesList[currIndex]})).append(" ");
 }
sbId.append("= "); 
 System.out.println(sbId.toString() + sbValue.toString()); 
sbId = new StringBuilder(); 
sbValue = new StringBuilder(); 

 } 
 public int method_int_int_4 (  int intVal_5 ) { 
 Long LongArrayVar_6[]  = new Long [500];
FuzzUtils.init(LongArrayVar_6, -3581L);

boolean booleanVar_7 = true; 

boolean booleanVar_8 = false; 

 float floatArrayVar_9[]  = new float [500];
FuzzUtils.init(floatArrayVar_9, -975.1625658617457F);

boolean booleanVar_10 = true; 

long longVar_11 = 45L; 

Short ShortVar_12 = 25524; 

int intVar_13 = 31922; 

if ( ( ( ( -0.9637944387308159F + 0.872107074229433F ) - -0.0841186107297045F )  <=  -776599.8078583813F ) ) { 
 for (  int intIndVar_14 = 916/* LOOP_CNT_UPPER_LIMIT_NOT_ARRAY_SAFE_VAR_LONG_LOOP */; 
intIndVar_14 <=  1  ; intIndVar_14 = intIndVar_14 -  2  ) { 
if ( ( 25.508144647008805F  >=  72.52059163512047F ) ) { 
if ( ( ( 85.79033318148885F - ( -0.9866814073986869F - 13.98591924053396F ) )  !=  ( -510.6460196317313F - 81.14359048185952F ) ) ) {  byte byteUnknownZeroVar_15 = (byte)(FuzzUtils.UnknownZero);
 byte byteIndArraySafeVar_16 = 87; 
 while ( byteIndArraySafeVar_16 <= 3 + byteUnknownZeroVar_15 * byteIndArraySafeVar_16 ) { 

--byteIndArraySafeVar_16; 

 } 
  } else {  byte byteUnknownZeroVar_17 = (byte)(FuzzUtils.UnknownZero);
 for (  byte byteIndArraySafeVar_18 =  1 ; 
byteIndArraySafeVar_18 != 47 + byteUnknownZeroVar_17 * 97 ; byteIndArraySafeVar_18 = (byte)(byteIndArraySafeVar_18 + 1) ) { 
longVar_11 += longVar_11; 
 intVar_13 -= intIndVar_14; 
 ShortVar_12 = Short.valueOf((short)ShortVar_12); 
 floatArrayVar_9 = floatArrayVar_9; 
  System.arraycopy(Test.FloatArrayFieldVar_0, 94, Test.FloatArrayFieldVar_0, 40, 38);
 Test.FloatArrayFieldVar_0 = Arrays.copyOf(FloatArrayFieldVar_0, 435);
 intVar_13 += intVar_13; 
 longVar_11 -= ((booleanVar_8) ? longVar_11 : longVar_11 ); 
 
 } 
  } 
 intVar_13 += ( ( -4051 - intVal_5 ) * intVar_13 ); 
 intVar_13 += intVar_13; 
 booleanVar_8 = ( ( ( -9223372036854775801L * -2147483643L ) - 93L )  ==  ( -13742L * ( 4290L * 32250L ) ) ); 
 intVar_13 = ( -82 - ( intVal_5 << intVar_13 ) ); 
  for (  short shortIndArraySafeVar_19 =  1 ; 
shortIndArraySafeVar_19 <= 31 ; ++shortIndArraySafeVar_19 ) { 

 } 
 
 } 
 longVar_11 -= longVar_11; 
 
 } 
 
 } else if ( booleanVar_7 ) { 

 } 
 return ( int )( (0 + 
  ( intVar_13 ) +   ( intVal_5 ) +  0
 + 
 0
 + 
 0
 + 
  ( longVar_11 ) +  0
 + 
   checksumCollectionVarsMethodfloat( new float[][]{floatArrayVar_9}) +  0
 + 
 0
 + 
 0
 + 
  ( ShortVar_12 ) +  0
 + 
 0
 + 
   checksumCollectionVarsMethodLong( new Long[][]{LongArrayVar_6}) +  0
 + 
 0
 + 
 0
 + 
  0) ); 

 } 

 public long method_long_long_20 (  long longVal_21 ) { 
byte byteVar_22 = 52; 

 long longArrayVar_23[]  = new long [500];
FuzzUtils.init(longArrayVar_23, longVal_21);

boolean booleanVar_24 = true; 

long longVar_25 = -28037L; 

 int intArrayVar_26[]  = new int [500];
FuzzUtils.init(intArrayVar_26, -2147483641);

Double DoubleVar_27 = 50.106464389684135D; 

 Short ShortArrayVar_28[]  = new Short [500];
FuzzUtils.init(ShortArrayVar_28, Short.valueOf((short)-6));

final Boolean BooleanVal_29 = false; 

 Long LongArrayVar_30[]  = new Long [500];
FuzzUtils.init(LongArrayVar_30, -11L);

long longVar_31 = -1064603939L; 

int intVar_32 = 670382593; 

 double doubleArrayVar_33[]  = new double [500];
FuzzUtils.init(doubleArrayVar_33, -32.158212653451514D);

int intVar_34 = -20141; 

int intVar_35 = -20086; 

boolean booleanVar_36 = true; 

double doubleVar_37 = -0.7516964050082322D; 

double doubleVar_38 = 85.23372355796664D; 

int intVar_39 = -2147483647; 

long longVar_40 = -2147483673L; 

final double doubleVal_41 = -42.0989347401171D; 

boolean booleanVar_42 = true; 

short shortVar_43 = 125; 

 int intIndVar_44 = 1033/* LOOP_CNT_UPPER_LIMIT_NOT_ARRAY_SAFE_VAR_LONG_LOOP */; 
 while ( intIndVar_44 <  1  ) { 
longVar_31 += longVar_40; 
  for (  short shortIndVar_45 = 7; 
shortIndVar_45 < 97 ; shortIndVar_45 = (short)(shortIndVar_45 +  3 ) ) { 
ShortArrayVar_28 = Arrays.copyOf(ShortArrayVar_28, 495);
 if ( ( 9223372036854775800L  !=  ( 756166031L - longVar_31 ) ) ) { if ( booleanVar_36 ) { 
 switch (intVar_39) {
          case -3: longVar_25 = longVar_31; 
           default : longVar_31 += ( longVar_25 * longVar_31 ); 
      break; 
 }
 if ( ( ( intVar_39 + -25 )  >  intVar_32 ) ) { 
longVar_31 *= longVar_40; 
 Test.longArrayFieldVar_2 = Arrays.copyOf(longArrayFieldVar_2, 456);
 intVar_32 += ( intVar_39 | intIndVar_44 ); 
 intVar_39 += intVar_39; 
 
 } 
 if ( booleanVar_24 ) { 
longVar_40 *= ((BooleanVal_29) ? longVar_25 : ( longVar_31 - longVar_25 ) ); 
 byteVar_22 >>>= (byte)(byteVar_22); 
 intVar_32 += intVar_32; 
 intVar_35 -= intArrayVar_26[(( -39618210 - intVar_35 ) >>> 1) % 341]; 
 
 } 
 
 } else { 

 } 
  } else { if ( ( -96  >=  18640 ) ) { 

 } 
  } 
 
 } 
 
intIndVar_44--; 

 } 
 return ( long )( (0 + 
  ( intVar_32 + intVar_34 + intVar_35 + intVar_39 ) +    checksumCollectionVarsMethodint( new int[][]{intArrayVar_26}) +  0
 + 
  ( shortVar_43 ) +  0
 + 
  ( byteVar_22 ) +  0
 + 
  ( longVar_25 + longVar_31 + longVar_40 ) +   ( longVal_21 ) +    checksumCollectionVarsMethodlong( new long[][]{longArrayVar_23}) +  0
 + 
 0
 + 
  ( doubleVar_37 + doubleVar_38 ) +   ( doubleVal_41 ) +    checksumCollectionVarsMethoddouble( new double[][]{doubleArrayVar_33}) +  0
 + 
 0
 + 
   checksumCollectionVarsMethodShort( new Short[][]{ShortArrayVar_28}) +  0
 + 
 0
 + 
   checksumCollectionVarsMethodLong( new Long[][]{LongArrayVar_30}) +  0
 + 
 0
 + 
  ( DoubleVar_27 ) +  0
 + 
  0) ); 

 } 

 public byte method_byte_byte_46 (  byte byteVal_47 ) { 
float floatVar_48 = -39.52209266268145F; 

 final  int intArrayVal_49[]  = new int [500];
FuzzUtils.init(intArrayVal_49, 94);

boolean booleanVar_50 = false; 

 float floatArrayVar_51[]  = new float [500];
FuzzUtils.init(floatArrayVar_51, floatVar_48);

 int intArrayVar_52[]  = new int [500];
FuzzUtils.init(intArrayVar_52, -714942925);

boolean booleanVar_53 = false; 

boolean booleanVar_54 = false; 

final Boolean BooleanVal_55 = false; 

boolean booleanVar_56 = true; 

 float floatArrayVar_57[]  = new float [500];
FuzzUtils.init(floatArrayVar_57, Test.floatFieldVar_1);

byte byteVar_58 = 119; 

Short ShortVar_59 = 69; 

float floatVar_60 = 0.6820364934983723F; 

 for (  short shortIndArraySafeVar_61 =  1 ; 
shortIndArraySafeVar_61 < 35 ; ++shortIndArraySafeVar_61 ) { 
if ( booleanVar_50 ) { 
if ( ( -17564  >=  62 ) ) { 
try { 
 for (  int intIndArraySafeVar_62 =  1 ; 
intIndArraySafeVar_62 < 40 ; intIndArraySafeVar_62 = intIndArraySafeVar_62 +  1  ) { 
floatArrayVar_51 = Arrays.copyOf(floatArrayVar_57, (intArrayVar_52[shortIndArraySafeVar_61 ]) % (4 * 500));
 floatVar_48 = floatArrayVar_57[intIndArraySafeVar_62]; 
 Test.floatFieldVar_1 += ((( ( 124 - -93 )  >  -128 )) ? floatArrayVar_51[intArrayVal_49[intIndArraySafeVar_62 ]] : floatArrayVar_51[shortIndArraySafeVar_61 ] ); 
 if ( ( ( ( -29470 + 72 ) - -63 )  <=  ( ( 33 * 123 ) - ( 13678 - -31332 ) ) ) ) { 
Test.floatFieldVar_1 += ( floatArrayVar_51[shortIndArraySafeVar_61 ] - floatArrayVar_51[intIndArraySafeVar_62 ] ); 
 floatVar_60 += (float)(((booleanVar_54) ? -55.80084279093316D : -20.734864958889972D )); 
 floatArrayVar_57 = Arrays.copyOf(floatArrayVar_51, 466);
 
 } 
 floatVar_48 -= floatArrayVar_57[shortIndArraySafeVar_61 ]; 
 if ( (booleanVar_54 || booleanVar_50) ) { 
 System.arraycopy(floatArrayVar_57, (( intIndArraySafeVar_62 + intArrayVar_52[intIndArraySafeVar_62 ] ))/20, floatArrayVar_51, intIndArraySafeVar_62, (intArrayVal_49[intIndArraySafeVar_62 ]) % (4 * 500) );
 booleanVar_54 = ( intArrayVar_52[intArrayVal_49[intIndArraySafeVar_62 ]]  ==  ( intArrayVar_52[intIndArraySafeVar_62] + intArrayVar_52[intArrayVar_52[intIndArraySafeVar_62 ]] ) ); 
 intArrayVar_52 = Arrays.copyOf(intArrayVar_52, 467);
 floatArrayVar_57 = Arrays.copyOf(floatArrayVar_57, (intArrayVar_52[intArrayVar_52[shortIndArraySafeVar_61 ]]) % (4 * 500));
 
 } else { 

 } 
 
 } 
 
} catch (Exception exVar_63 ) {
//  System.out.println(exVar_63.getClass().getCanonicalName());  
 byte byteIndVar_64 =  1 ; 
 while ( byteIndVar_64 != 93 ) { 

byteIndVar_64 = (byte)(byteIndVar_64 + 1); 

 } 
 try { 

} catch (Exception exVar_65 ) {
//  System.out.println(exVar_65.getClass().getCanonicalName());  
} 
 } 
 
 } 
 
 } else { 

 } 
 
 } 
 return ( byte )( (0 + 
   checksumCollectionVarsMethodint( new int[][]{intArrayVar_52}) +    checksumCollectionVarsMethodint( new int[][]{intArrayVal_49}) +  0
 + 
 0
 + 
  ( byteVar_58 ) +   ( byteVal_47 ) +  0
 + 
 0
 + 
  ( floatVar_48 + floatVar_60 ) +    checksumCollectionVarsMethodfloat( new float[][]{floatArrayVar_51,floatArrayVar_57}) +  0
 + 
 0
 + 
 0
 + 
  ( ShortVar_59 ) +  0
 + 
 0
 + 
 0
 + 
 0
 + 
 0
 + 
  0) ); 

 } 

 public Long method_Long_Long_66 (  Long LongVal_67 ) { 
 long longArrayVar_68[]  = new long [500];
FuzzUtils.init(longArrayVar_68, -27179L);

int intVar_69 = 2147483639; 

byte byteVar_70 = -125; 

 for (  long longIndVar_71 = 1400/* LOOP_CNT_UPPER_LIMIT_NOT_ARRAY_SAFE_VAR_LONG_LOOP */; 
longIndVar_71 <=  1  ; longIndVar_71 = longIndVar_71 -  4  ) { 
if ( ( 407.85339910176435F  <  0.8560653345687306F ) ) { 
longArrayVar_68 = Arrays.copyOf(longArrayVar_68, 447);
 if ( ( ( -61 - -23 )  >=  -38 ) ) { 
 byte byteUnknownZeroVar_72 = (byte)(FuzzUtils.UnknownZero);
 for (  byte byteIndArraySafeVar_73 = 65; 
byteIndArraySafeVar_73 <  1  + byteUnknownZeroVar_72 * byteVar_70 ; byteIndArraySafeVar_73-- ) { 
intVar_69 = intVar_69; 
 byteVar_70 = (byte)(byteVar_70); 
 if ( ( ( -32767 >>> 32765 )  >  32763 ) ) { longArrayVar_68 = longArrayVar_68; 
  } else { intVar_69 -= intVar_69; 
  } 
  switch (( -125 - byteVar_70 )) {
          case -3: intVar_69 = ( intVar_69 + intVar_69 ); 
      break; 
     case -2: intVar_69 += ( intVar_69 + 10271 ); 
      break; 
     case 0: byteVar_70 += (byte)(byteVar_70); 
      case 2: byteVar_70 += (byte)(( -49 ^ (byte)(( 6978 - 92 )) )); 
      break; 
          default : byteVar_70 -= (byte)(byteVar_70); 
      break; 
 }
 intVar_69 += ( intVar_69 + intVar_69 ); 
 
 } 
 intVar_69 -= 55; 
 intVar_69 += byteVar_70; 
 intVar_69 += intVar_69; 
 
 } else { 

 } 
 
 } 
 
 } 
 return new Long( (long) (0 + 
  ( intVar_69 ) +  0
 + 
 0
 + 
  ( byteVar_70 ) +  0
 + 
   checksumCollectionVarsMethodlong( new long[][]{longArrayVar_68}) +  0
 + 
 0
 + 
 0
 + 
 0
 + 
 0
 + 
 0
 + 
  ( LongVal_67 ) +  0
 + 
 0
 + 
 0
 + 
  0) ); 

 } 

  public void mainTest(String[] strArr1) { 
float floatVar_74 = -0.44510678383900326F; 

 double doubleArrayVar_75[]  = new double [500];
FuzzUtils.init(doubleArrayVar_75, 121.53298559916698D);

final Boolean BooleanVal_76 = false; 

int intVar_77 = 97; 

int intVar_78 = 88; 

boolean booleanVar_79 = false; 

 long longArrayVar_80[]  = new long [500];
FuzzUtils.init(longArrayVar_80, -9223372036854775801L);

final double doubleVal_81 = 32.837045972630705D; 

double doubleVar_82 = -62.25152907985429D; 

long longVar_83 = 21834L; 

final int intVal_84 = -105; 

long longVar_85 = 2147483678L; 

 switch (-112) {
          case -3:  long longUnknownZeroVar_86 = FuzzUtils.UnknownZero;
 for (  long longIndVar_87 = 730/* LOOP_CNT_UPPER_LIMIT_NOT_ARRAY_SAFE_VAR_LONG_LOOP */; 
longIndVar_87 <  1  + longUnknownZeroVar_86 * longVar_83 ; longIndVar_87 = longIndVar_87 -  2  ) { 
if ( true ) {  long longIndArraySafeVar_88 = 67; 
 while ( longIndArraySafeVar_88 <  1  ) { 
if ( booleanVar_79 ) { intVar_78 += ( intVar_78 - intVar_78 ); 
  } else { doubleVar_82 -= ( ( doubleArrayVar_75[(int)longIndArraySafeVar_88 ] * doubleVar_82 ) - doubleArrayVar_75[(int)longIndArraySafeVar_88 ] ); 
  } 
 if ( (booleanVar_79 || ( 79.40846273938317F  <  -0.73109073205438F )) ) { 
floatVar_74 -= ( floatVar_74 + ( floatVar_74 + floatVar_74 ) ); 
 longVar_85 *= Math.abs(-41L); 
 intVar_78 += intVar_78--; 
 floatVar_74 = floatVar_74; 
 longVar_83 -= ( ( longArrayVar_80[(int)longIndArraySafeVar_88 ] - longVar_83 ) - ( longArrayVar_80[(int)longIndArraySafeVar_88 ] + longArrayVar_80[(int)longIndArraySafeVar_88 ] ) ); 
 
 } 
 if ( ( ( 123 - ( -127 + -55 ) )  <  -127 ) ) { 
intVar_77 = ( intVar_78 - intVar_78 ); 
 intVar_78 -= ( ( intVar_78 - intVar_78 ) + intVar_78 ); 
 doubleVar_82 += ( doubleArrayVar_75[(int)longIndArraySafeVar_88 ] - 179229.03948251088D ); 
 longVar_83 += longArrayVar_80[(int)longIndArraySafeVar_88 ]; 
 intVar_77 = intVar_78; 
 longVar_85 = Math.min(longArrayVar_80[(int)longIndArraySafeVar_88 ], longVar_83); 
 
 } else { 

 } 
 
longIndArraySafeVar_88--; 

 } 
  } else {  for (  short shortIndVar_89 =  1 ; 
shortIndVar_89 < 81 ; ++shortIndVar_89 ) { 

 } 
  } 
 
 } 
      break; 
          default : if ( false ) { 

 } else { 

 } 
      break; 
 }
 Long LongVal_90 = method_Long_Long_66 ( 18L ); 
 long longVal_91 = method_long_long_20 ( longVar_83 ); 
 int intVal_92 = method_int_int_4 ( method_int_int_4 ( intVar_77 ) ); 
 int intVal_93 = method_int_int_4 ( ( intVar_77 + ( 6492 - 18609 ) ) ); 
 int intVal_94 = method_int_int_4 ( intVar_77-- ); 
 long longVal_95 = method_long_long_20 ( method_long_long_20 ( longVar_83 ) ); 
 long longVal_96 = method_long_long_20 ( longVar_83 ); 
 long longVal_97 = method_long_long_20 ( method_long_long_20 ( ( longVar_85 + longVar_85 ) ) ); 
 Long LongVal_98 = method_Long_Long_66 ( ( LongVal_90 + 27493L ) ); 
 Long LongVal_99 = method_Long_Long_66 ( ( (long)((long)(( intVar_77 + intVar_78 ))) - ( LongVal_90 + -20088L ) ) ); 
 long longVal_100 = method_long_long_20 ( longVar_83 ); 
 Long LongVal_101 = method_Long_Long_66 ( LongVal_90 ); 
 Long LongVal_102 = method_Long_Long_66 ( LongVal_90 ); 
 byte byteVal_103 = method_byte_byte_46 ( (byte)((byte)(longVar_83)) ); 
 byte byteVal_104 = method_byte_byte_46 ( (byte)(-125) ); 
 Long LongVal_105 = method_Long_Long_66 ( LongVal_102 ); 
 long longVal_106 = method_long_long_20 ( longVar_83++ ); 
 long longVal_107 = method_long_long_20 ( 1695L ); 
 byte byteVal_108 = method_byte_byte_46 ( (byte)(-128) ); 
 int intVal_109 = method_int_int_4 ( intVar_78 ); 
 byte byteVal_110 = method_byte_byte_46 ( (byte)(byteVal_108) ); 
 byte byteVal_111 = method_byte_byte_46 ( (byte)(( ( byteVal_108 * byteVal_110 ) + ( byteVal_103 * byteVal_108 ) )) ); 
 long longVal_112 = method_long_long_20 ( longVar_83 ); 
 printVarsMethod(" intVar_77,intVar_78", new int[]{ intVar_77,intVar_78 }); 
printVarsMethod(" intVal_84,intVal_92,intVal_93,intVal_94,intVal_109", new int[]{ intVal_84,intVal_92,intVal_93,intVal_94,intVal_109 }); 
printVarsMethod(" byteVal_103,byteVal_104,byteVal_108,byteVal_110,byteVal_111", new byte[]{ byteVal_103,byteVal_104,byteVal_108,byteVal_110,byteVal_111 }); 
printVarsMethod(" longVar_83,longVar_85", new long[]{ longVar_83,longVar_85 }); 
printVarsMethod(" longVal_91,longVal_95,longVal_96,longVal_97,longVal_100,longVal_106,longVal_107,longVal_112", new long[]{ longVal_91,longVal_95,longVal_96,longVal_97,longVal_100,longVal_106,longVal_107,longVal_112 }); 
printCollectionVarsMethod_long(" longArrayVar_80", new long[][]{ longArrayVar_80  }); 
printCollectionVarsMethod_long(" longArrayFieldVar_2", new long[][]{ longArrayFieldVar_2  }); 
printVarsMethod(" floatVar_74", new float[]{ floatVar_74 }); 
printVarsMethod(" floatFieldVar_1", new float[]{ floatFieldVar_1 }); 
printVarsMethod(" doubleVar_82", new double[]{ doubleVar_82 }); 
printVarsMethod(" doubleVal_81", new double[]{ doubleVal_81 }); 
printCollectionVarsMethod_double(" doubleArrayVar_75", new double[][]{ doubleArrayVar_75  }); 
printVarsMethod(" LongVal_90,LongVal_98,LongVal_99,LongVal_101,LongVal_102,LongVal_105", new Long[]{ LongVal_90,LongVal_98,LongVal_99,LongVal_101,LongVal_102,LongVal_105 }); 
printVarsMethod(" FloatFieldVar_3", new Float[]{ FloatFieldVar_3 }); 
printCollectionVarsMethod_Float(" FloatArrayFieldVar_0", new Float[][]{ FloatArrayFieldVar_0  }); 
}
 public static void main(String[] args) { 
   try {
   Test _instance = new Test(); 
      for (int i = 0; i < 1000; i++ ) { 
            _instance.mainTest(args); 
       }
   } catch (Exception ex) {
        System.out.println(ex.getClass().getCanonicalName()); 
    } 
}
 } 

