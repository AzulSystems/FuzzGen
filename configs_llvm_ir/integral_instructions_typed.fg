#INCLUDE "configs_llvm_ir/expression_typed.fg" $1
#INCLUDE "configs_llvm_ir/icmp.fg"

// $1 - returned type
@INTEGRAL_INSTRUCTION_$1
#BEGIN_RULE
    `  %`
    #CREATE_LAZY_ID val_$1_
    ` = `
    @INTEGRAL_INSTRUCTION_$1_IMPL
    #REGISTER_LAZY_IDS
    #SET NUM_VALUES_$1=NUM_VALUES_$1+1
#END_RULE

@INTEGRAL_INSTRUCTION_$1_IMPL
#BEGIN_RULE
    @INTEGRAL_BIN_OP_WITH_FLAGS_$1
#END_RULE
#BEGIN_RULE
    @INTEGRAL_BIN_OP_NO_FLAGS_$1
#END_RULE
#BEGIN_RULE:ENABLE_i1
    @SELECT_$1
#END_RULE

@INTEGRAL_BIN_OP_WITH_FLAGS_$1
#BEGIN_RULE
  @INTEGRAL_BIN_OP_WITH_FLAGS_OPCODE ` ` @NO_WRAP_FLAGS `$1 ` @EXPRESSION_$1 `, ` @EXPRESSION_$1 ``
#END_RULE

@INTEGRAL_BIN_OP_NO_FLAGS_$1
#BEGIN_RULE
  @INTEGRAL_BIN_OP_NO_FLAGS_OPCODE ` $1 ` @EXPRESSION_$1 `, ` @EXPRESSION_$1 ``
#END_RULE

@SELECT_$1
#BEGIN_RULE
  `select i1 ` @EXPRESSION_i1 `, $1 ` @EXPRESSION_$1 `, $1 ` @EXPRESSION_$1
#END_RULE

@INTEGRAL_BIN_OP_WITH_FLAGS_OPCODE
#BEGIN_RULE:4
    `add`
#END_RULE
#BEGIN_RULE:2
    `mul`
#END_RULE
#BEGIN_RULE:2
    `sub`
#END_RULE

@INTEGRAL_DIV_OP
#BEGIN_RULE
    `udiv` @MAYBE_EXACT
#END_RULE
#BEGIN_RULE
    `sdiv` @MAYBE_EXACT
#END_RULE
#BEGIN_RULE
    `urem`
#END_RULE
#BEGIN_RULE
    `srem`
#END_RULE

@MAYBE_EXACT
#BEGIN_RULE:4
#END_RULE
#BEGIN_RULE
    ` exact `
#END_RULE



@NO_WRAP_FLAGS
#BEGIN_RULE
    @MAYBE_NUW @MAYBE_NSW
#END_RULE

@MAYBE_NUW
#BEGIN_RULE:4
#END_RULE
#BEGIN_RULE
    `nuw `
#END_RULE

@MAYBE_NSW
#BEGIN_RULE:4
#END_RULE
#BEGIN_RULE
    `nsw `
#END_RULE

@INTEGRAL_BIN_OP_NO_FLAGS_OPCODE
#BEGIN_RULE:2
    `and`
#END_RULE
#BEGIN_RULE
    `or`
#END_RULE
#BEGIN_RULE
    `xor`
#END_RULE
#BEGIN_RULE:ALLOW_UB
    @INTEGRAL_DIV_OP    
#END_RULE

@ICMP_$1
#BEGIN_RULE
    `  %`
    #CREATE_LAZY_ID val_i1_
    ` = icmp `
    @PREDICATE
    ` $1 `
    @EXPRESSION_$1
    `, `
    @EXPRESSION_$1
    #REGISTER_LAZY_IDS
    #SET NUM_VALUES_i1=NUM_VALUES_i1+1
#END_RULE

@INTEGRAL_INSTRUCTION
#APPEND_RULE:ENABLE_$1
    @INTEGRAL_INSTRUCTION_$1
#END_RULE

@ICMP_INSTRUCTION
#APPEND_RULE:ENABLE_$1
    @ICMP_$1
#END_RULE

