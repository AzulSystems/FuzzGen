#INCLUDE "configs_java/dataTypes.fg"
#INCLUDE "configs_java/arrayTypes.fg" $1
#INCLUDE "configs_java/parametersBasic.fg"
#INCLUDE "configs_java/parametersByType.fg" ( $1 ) (Val Var) (Integer Short Byte Long Float Double String) (Static Instance)

@$1_EXPRESSION
@int_EXPRESSION
@Boolean_EXPRESSION
@boolean_EXPRESSION
@REUSE_ID_$1_ARRAY_VAR_OR_VAL_BY_IND_ARRAY_SAFE_VAR
@REUSE_ID_$1_ArrayList_VAR
@REUSE_ID_$1_LinkedList_VAR

@STATEMENT
@STATEMENTS_SHORT

@EXCEPTION
@FOR_LOOP_YIELD_LIST_$1
@FOR_LOOP_YIELD_SET_$1
@FOR_LOOP_YIELD_$1
@LIST_TO_INT_FUNC
@ARRAY_FILL


@RETURN_IN_CONDITIONAL
    #APPEND_RULE:100*MethodReturnTypeIs$1*CondNest
        `return `  @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
    #END_RULE
    #APPEND_RULE
    #END_RULE

@ASSIGN
    #APPEND_RULE:100*(&IDsCount($1Var_)+&IDsCount($1FieldVar_)+1*&IDsCount(Cls_, $1FieldVar_))*Enable$1
        @ASSIGN_$1_VAR
    #END_RULE
    #APPEND_RULE:10*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVar_)+1*&IDsCount(Cls_, $1ArrayFieldVar_))*Enable$1
        @ASSIGN_$1_ARRAY_VAR
    #END_RULE
    #APPEND_RULE:10*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVar_)+1*&IDsCount(Cls_, $1ArrayFieldVar_)+&IDsCount($1ArrayVal_)+&IDsCount($1ArrayFieldVal_))*Enable$1
        @ASSIGN_TO_$1_ARRAY_VAR_OR_VAL_ELEMENT
    #END_RULE
//    //#APPEND_RULE:((&IDsCount($1ArrayListVar_)+&IDsCount($1ArrayListFieldVar_))*10+global_&IDsCount($1ArrayListFieldVar_))*(1-lambdaVal)
    #APPEND_RULE:((&IDsCount($1ArrayListVar_)+&IDsCount($1ArrayListFieldVar_))*1)*(1-lambdaVal)*(1-$1IsPrimitiveType)
        @REUSE_ID_$1_ArrayList_VAR ` = (new ArrayList<$1>());` \n
    #END_RULE
    #APPEND_RULE:(&IDsCount($1LinkedListVar_)+&IDsCount($1LinkedListFieldVar_))*(1-lambdaVal)*(1-$1IsPrimitiveType)
        @REUSE_ID_$1_LinkedList_VAR ` = (new LinkedList<$1>());` \n
    #END_RULE
    #APPEND_RULE // dummy rule to workaround a rare issue
        //#REUSE_ID %Var_ ` = ` #GET_LAST_ID `;` \n 
        `int ` #CREATE_ID assignSmthVar_ ` = ` @int_CONSTANT `;` \n
    #END_RULE

@COLLECTION_VAL    
    #APPEND_RULE:Enable$1
        @DECLARE_COLLECTION_VAL ` = ` @FOR_LOOP_YIELD_$1
    #END_RULE

@ASSIGN_TO_$1_ARRAY_VAR_OR_VAL_ELEMENT
    #BEGIN_RULE
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[(` @int_EXPRESSION ` >>> 1) % ` @[MaxArrayCount/2:3*MaxArrayCount/4] `]`  @SET_OR_SET_OP_$1 @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; `\n
//        @REUSE_ID_$1_ARRAY_VAR `( ( ( ( ` @REUSE_ID_int_VAR ` % ` #GET_LAST_ID `.length  ) / 2 ).abs ).min( ` @ARRAY_MAX_LENGTH ` - 1 ) ) = ` @$1_EXPRESSION \n
    #END_RULE
    #BEGIN_RULE:2*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*(&IDsCount(intIndArraySafeVar_)+&IDsCount(byteIndArraySafeVar_)+&IDsCount(shortIndArraySafeVar_)+&IDsCount(longIndArraySafeVar_))
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL_BY_IND_ARRAY_SAFE_VAR  @SET_OR_SET_OP_$1 @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; `\n
    #END_RULE
    #BEGIN_RULE:1
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[  Math.min( Math.abs(( ` @int_LITERAL ` ) / 2 ), ( ` @[MaxArrayCount/2:3*MaxArrayCount/4] ` )) ] ` @SET_OR_SET_OP_$1 @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
    #END_RULE
    #BEGIN_RULE:1*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVar_)+&IDsCount($1ArrayVal_)+&IDsCount($1ArrayFieldVal_))*TryCatchDepth*1000
       @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[` @int_EXPRESSION `]`  @SET_OR_SET_OP_$1 @$1_CAST_OPEN @$1_EXPRESSION     @$1_CAST_CLOSE `; ` \n
    #END_RULE

@ASSIGN_$1_VAR
    #BEGIN_RULE//:20*&IDsCount($1Var_)
        @REUSE_ID_$1_VAR @SET_OR_SET_OP_$1 @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
    #END_RULE
   
@ASSIGN_$1_ARRAY_VAR
    #BEGIN_RULE
    @REUSE_ID_$1_ARRAY_VAR ` = ` @REUSE_ID_$1_ARRAY_VAR_OR_VAL `; `\n
    #END_RULE

@SWITCH_$1
    #APPEND_RULE:&IDsCount($1Var_)
        #SET SwitchMatchTmp=SwitchMatch+2
        #SET SwitchMatch=5*(-1+$1IscharType)
        ` switch (` @$1_EXPRESSION `) {` \n
        `     ` @SWITCH_CASES_$1
        `     ` @SWITCH_DEFAULT_CASE_$1
        ` }` \n
        #SET SwitchMatch=SwitchMatchTmp+2
    #END_RULE

@SWITCH_CASE_$1
    #BEGIN_RULE
        #SET SwitchMatch=SwitchMatch+2
        `     case ` @[SwitchMatch+-1:SwitchMatch+1] `: ` @STATEMENT @SWITCH_BREAK
    #END_RULE

@SWITCH_DEFAULT_CASE_$1
    #BEGIN_RULE:7
    `     default : ` @STATEMENT @SWITCH_BREAK
    #END_RULE
    #BEGIN_RULE
    #END_RULE

@SWITCH_BREAK
    #BEGIN_RULE:10
    `     break; ` \n
    #END_RULE
    #BEGIN_RULE
    #END_RULE


@SWITCH_CASES_$1
    #BEGIN_RULE:5
        @SWITCH_CASE_$1 @SWITCH_CASES_$1
    #END_RULE
    #BEGIN_RULE
    #END_RULE


@MATCH
#APPEND_RULE:&IDsCount($1Var_)*&IDsCount($1Val_)
    @REUSE_ID_$1_VAR ` = ` @REUSE_ID_$1_VAL ` match {` \n
         @MATCH_STRING_$1
         `case _ => ` @$1_EXPRESSION ` } ` \n
#END_RULE

@MATCH_STRING_$1
#BEGIN_RULE:2*&IDsCount($1Val_)
    `case ` @REUSE_ID_$1_VAL ` => ` @$1_CONSTANT @$1_CONSTANT_SUFFIX \n
    @MATCH_STRING_$1
#END_RULE
#BEGIN_RULE:2*&IDsCount($1Val_)
    `case ` @REUSE_ID_$1_VAL ` => ` @$1_EXPRESSION \n
    @MATCH_STRING_$1
#END_RULE
#BEGIN_RULE:(&IDsCount($1Val_)+&IDsCount($1Val_))
#END_RULE

@MATCH_STRING
#APPEND_RULE:&IDsCount($1Val_)
@MATCH_STRING_$1
#END_RULE

@UPDATE_ARRAY
//    #APPEND_RULE:100*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_)+&IDsCount($1ArrayFieldVar_)+&IDsCount($1ArrayFieldVal_))
//        #SET PreferConstant=100
//        `for (int i = 0; i < ` @REUSE_ID_$1_ARRAY_VAR_OR_VAL `.length; i++) { ` \n
//                #GET_LAST_ID $1Array%Va%_ `[i] = ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
//        `}` \n
//        #SET PreferConstant=100
//    #END_RULE
//

     #APPEND_RULE:100*&IDsCount($1ArrayVar_)
        `for (int i = 0; i < ` #REUSE_ID $1ArrayVar_ `.length; i++) { ` \n
                #GET_LAST_ID $1ArrayVar_ `[i] = ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
        `}` \n
    #END_RULE

     #APPEND_RULE:100*&IDsCount($1ArrayVal_)
        `for (int i = 0; i < ` #REUSE_ID $1ArrayVal_ `.length; i++) { ` \n
                #GET_LAST_ID $1ArrayVal_ `[i] = ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
        `}` \n
    #END_RULE

     #APPEND_RULE:100*&IDsCount($1ArrayFieldVar_)
        `for (int i = 0; i < ` #REUSE_ID $1ArrayFieldVar_ `.length; i++) { ` \n
                #GET_LAST_ID $1ArrayFieldVar_ `[i] = ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
        `}` \n
    #END_RULE
     #APPEND_RULE:100*&IDsCount($1ArrayFieldVal_)
        `for (int i = 0; i < ` #REUSE_ID $1ArrayFieldVal_ `.length; i++) { ` \n
                #GET_LAST_ID $1ArrayFieldVal_ `[i] = ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
        `}` \n
    #END_RULE
    #APPEND_RULE:300*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_)+&IDsCount($1ArrayFieldVar_)+&IDsCount($1ArrayFieldVal_))
        @ARRAY_FILL
    #END_RULE
    #APPEND_RULE:(1-&IDsCount($1ArrayVar_)-&IDsCount($1ArrayVal_)-&IDsCount($1ArrayFieldVar_)-&IDsCount($1ArrayFieldVal_))
        `$1 ` #CREATE_ID tmpVar ` = ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; ` \n
    #END_RULE
