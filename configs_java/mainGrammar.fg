#INCLUDE "configs_java/parameters.fg"
#INCLUDE "configs_java/synchronizedBlock.fg"
#INCLUDE "configs_java/methods.fg"
#INCLUDE "configs_java/mainPrintByType.fg" (int char short byte long float double Integer Short Byte Long Float Double String)
#INCLUDE "configs_java/utils.fg"
#INCLUDE "configs_java/lambdaByType.fg" (int char short byte long float double Integer Short Byte Long Float Double String)
#INCLUDE "configs_java/funcWithGenericTypeArgs.fg"


@MAIN
#BEGIN_RULE
    @PACKAGE_DECLARATION
    @IMPORTS
    @UTILS_CLASS
    @ANOTHER_CLASS
    @SET_GLOBAL_COUNTERS_TO_ZERO
    #BEGIN_SCOPE
        @LAMBDA_INTERFACES
        @SUPER_CLASS_A
        @SUPER_CLASS_B
        @OTHER_CLASSES
        @TEST_CLASS
    #END_SCOPE
#END_RULE



@IMPORTS
    #BEGIN_RULE
        @IMPORTS_MAIN
        @IMPORTS_ADDITIONAL
#END_RULE

@LAMBDA_INTERFACES
    #BEGIN_RULE:5
        @LAMBDA_INTERFACE @LAMBDA_INTERFACES
            #END_RULE
            #BEGIN_RULE
            #END_RULE


@OTHER_CLASSES
    #BEGIN_RULE:2*(MaxClasses-ClassesCount)
    @OTHER_CLASS 
    @OTHER_CLASSES
    #END_RULE
    #BEGIN_RULE
    #END_RULE


@OTHER_CLASS
    #BEGIN_RULE
        #SET ClassesCount=ClassesCount+1
        #BEGIN_SCOPE
        @SET_DECLARED_FLAG_TO_ZERO
        @SET_DECLARED_FIELDS_FLAG_TO_ZERO
        @SET_DECLARED_METHOD_FLAG_TO_ZERO
        \n \n
        @OTHER_CLASS_COMMENTS 
        ` class ` @OTHER_CLASS_NAME_DECLARE @MAYBE_EXTENDS_SUPER_CLASS `{ ` \n
        #REGISTER_LAZY_IDS
            `// extends SprClsA_ ` @[extendsSprClsA:extendsSprClsA+1] \n
            `// extends SprClsB_ ` @[extendsSprClsB:extendsSprClsB+1] \n
        @TEST_CLASS_FIELDS
        @ADDITIONAL_TEST_CLASS_FIELDS
        @CONSTRUCTOR_METHOD
        #SET MethodCount=0
        //@SET_METHOD_COUNT_TO_ZERO_1[1]
        @SET_METHOD_COUNT_TO_ZERO
        @DECLARE_METHODS
            @SET_DECLARED_FLAG_TO_ZERO
            @SET_DECLARED_FIELDS_FLAG_TO_ZERO
            @SET_DECLARED_METHOD_FLAG_TO_ZERO
        #END_SCOPE

        ` } ` \n
        #SET extendsSprClsA=0
        #SET extendsSprClsB=0
    #END_RULE

@SET_METHOD_COUNT_TO_ZERO_1
    #BEGIN_RULE
        #SET MethodCount=0
    #END_RULE



@OTHER_CLASS_NAME_DECLARE
    #BEGIN_RULE
        #CREATE_LAZY_ID Cls_
    #END_RULE

@REUSE_OTHER_CLASS_NAME
    #BEGIN_RULE
        #REUSE_ID Cls_
    #END_RULE

@UTILS_CLASS_NAME
#BEGIN_RULE
    `FuzzUtils`
#END_RULE

@UTILS_CLASS
#BEGIN_RULE:IsARegularConfiguration
` class ` @UTILS_CLASS_NAME ` { ` \n
#BEGIN_SCOPE
    @UTILS_FIELDS
    @UTILS_METHODS_COMMON
        @DECLARE_CHECKSUM_COLLECTION
        @DECLARE_PRINT_VARS_METHOD
        @DECLARE_PRINT_COLLECTION_VARS_METHOD

#END_SCOPE
        ` } ` \n
#END_RULE
#BEGIN_RULE:1-IsARegularConfiguration
        @CUSTOM_UTILS_CLASS
#END_RULE


@SUPER_CLASS_A
    #BEGIN_RULE
        @SET_DECLARED_FLAG_TO_ZERO
        @SET_DECLARED_FIELDS_FLAG_TO_ZERO
        #BEGIN_SCOPE
        #SET InSprClsA=1
        #SET InSprClsB=0
        `class ` #CREATE_ID Cls_ `{` \n
         `// ` #CREATE_ID SprClsA_  \n
            @TEST_CLASS_FIELDS
        `}` \n
        #SET InSprClsA=0
        #SET InSprClsB=0
        @SET_DECLARED_FLAG_TO_ZERO
        @SET_DECLARED_FIELDS_FLAG_TO_ZERO
        @CHILD_CLASSES
        #SET ToExtendSpClsA=0
        #END_SCOPE
    #END_RULE


@CHILD_CLASSES
    #BEGIN_RULE
        #SET ToExtendSpClsA=1
        @OTHER_CLASS @CHILD_CLASSES
    #END_RULE
    #BEGIN_RULE
        #SET ToExtendSpClsA=0
    #END_RULE




@SUPER_CLASS_B
    #BEGIN_RULE
        @SET_DECLARED_FLAG_TO_ZERO
        @SET_DECLARED_FIELDS_FLAG_TO_ZERO
        #BEGIN_SCOPE
        #SET InSprClsA=0
        #SET InSprClsB=1
        `class  SprClsB {` \n
        `// ` #CREATE_ID SprClsB_  \n
            @TEST_CLASS_FIELDS
        `}` \n
        #SET InSprClsA=0
        #SET InSprClsB=0
        #END_SCOPE
        @SET_DECLARED_FLAG_TO_ZERO
        @SET_DECLARED_FIELDS_FLAG_TO_ZERO
    #END_RULE

@MAYBE_EXTENDS_SUPER_CLASS
    #BEGIN_RULE:ToExtendSpClsA
        #LEND_SCOPE_WITH_ID  SprClsA_ Cls_
        ` extends ` 
            #GET_LAST_ID Cls_ ` `
        #RETURN_SCOPE 
        #SET extendsSprClsA=1
    #END_RULE
    #BEGIN_RULE:1-ToExtendSpClsA
        #LEND_SCOPE SprClsB_
        ` extends SprClsB /* `  #GET_LAST_ID SprClsB_ ` */ `
        #RETURN_SCOPE 
        #SET extendsSprClsB=1
    #END_RULE
    #BEGIN_RULE:1-ToExtendSpClsA
    #END_RULE


@TEST_CLASS_NAME
#BEGIN_RULE
    `Test`
#END_RULE


@ACCESS_MODIFIER
    #BEGIN_RULE
        ` public ` 
    #END_RULE
    #BEGIN_RULE
        ` protected ` 
    #END_RULE
    #BEGIN_RULE
    #END_RULE


@SET_METHOD_COUNT_TO_ZERO
#BEGIN_RULE
        #SET MethodCount=0
#END_RULE


@CONSTRUCTOR_METHOD_NAME
    #BEGIN_RULE:1-TestClass
        #REUSE_LOCAL_ID Cls_
    #END_RULE
    #BEGIN_RULE:TestClass
        @TEST_CLASS_NAME
    #END_RULE

@CONSTRUCTOR_METHOD
    #BEGIN_RULE:3*(extendsSprClsA+extendsSprClsB)
        #SET MethodIsInstance=1
        @CONSTRUCTOR_METHOD_NAME `() ` ` {` \n
        #BEGIN_SCOPE
            #SET DontUseOtherClsMembers=1
            @ASSIGN
            @ASSIGN
            @ASSIGN
            @ASSIGN
            @ASSIGN
            #SET DontUseOtherClsMembers=0
        #END_SCOPE
            
        `}` \n
        #SET MethodIsInstance=0
    #END_RULE
    #BEGIN_RULE
    #END_RULE
        


@TEST_CLASS
#BEGIN_RULE:IsARegularConfiguration
#SET TestClass=1
    #BEGIN_SCOPE
        @TEST_CLASS_COMMENTS
        `//` #CREATE_LAZY_ID Test_ \n
        `public class ` @TEST_CLASS_NAME @MAYBE_EXTENDS_SUPER_CLASS `{ ` \n
        #REGISTER_LAZY_IDS
        @SET_DECLARED_FLAG_TO_ZERO
        @SET_DECLARED_FIELDS_FLAG_TO_ZERO
        @SET_DECLARED_METHOD_FLAG_TO_ZERO
        @RANDOM_ARRAY
        @UTILS_METHODS_TEST_SPECIFIC
        @UTILS_GET_EXPRESSION
        @funcWithCondListGeneric_DECLARE
        @funcWithCondListGeneric_BODY
        @BASE_FIELDS 
        @TEST_CLASS_FIELDS
        @ADDITIONAL_TEST_CLASS_FIELDS
        @CONSTRUCTOR_METHOD
        @DECLARE_METHOD_OBJ
        @DECLARE_METHOD_OBJ
        @DECLARE_METHOD_OBJ
        @DECLARE_METHOD_OBJ
        @DECLARE_METHOD_OBJ
        #SET MethodCount=0
        @SET_METHOD_COUNT_TO_ZERO
        @DECLARE_METHODS

        @METHOD_MAIN_TEST
        @METHOD_MAIN
        #SET extendsSprClsA=0
        #SET extendsSprClsB=0
    #END_SCOPE
        ` } ` \n
#END_RULE
#BEGIN_RULE:1-IsARegularConfiguration
        @CUSTOM_TEST_CLASS
#END_RULE

        @METHOD_MAIN
#BEGIN_RULE
        ` public static void main(String[] args) { ` \n
#BEGIN_SCOPE
            `   try {` \n
                `   Test _instance = new Test(); ` \n
                    `      for (int i = 0; i < ` @MAIN_TEST_ITERATIONS  `; i++ ) { ` \n
                        `            _instance.mainTest(args); ` \n
                            `       }` \n
                            `   } catch (Exception ex) {`     \n
                                `        System.out.println(ex.getClass().getCanonicalName()); ` \n
                                    `    } ` \n

#END_SCOPE
                                    `}` \n
#END_RULE




@BASE_FIELDS
#BEGIN_RULE
#END_RULE

//@TEST_CLASS_FIELDS[0]
@TEST_CLASS_FIELDS
#BEGIN_RULE:FieldVarWeight*(MaxFieldsInClass-FieldsInClassCount)
#SET FieldsInClassCount=FieldsInClassCount+1
@DECLARE_FIELD_VAR_OF_TYPE @TEST_CLASS_FIELDS
#END_RULE
#BEGIN_RULE
    @DECLARE_FIELD_VAR_OF_TYPE
#SET FieldsInClassCount=0
#END_RULE

@METHOD_MAIN_TEST
#BEGIN_RULE
    @METHOD_MAIN_TEST_COMMENTS
    \n `  public void mainTest(String[] strArr1) { ` \n
#SET MethodIsInstant=1
#SET MethodIsStatic=0
#BEGIN_SCOPE
     @MAIN_TEST_OBJECT_BODY
#END_SCOPE
                                            `}` \n
#END_RULE

@MAIN_TEST_OBJECT_BODY
#BEGIN_RULE

        #BEGIN_SCOPE
        @SET_FLAGS_BEFORE_METHOD_
        @SET_DECLARED_FLAG_TO_ZERO
        #SET LambdaCount=0
        #SET StatementsInMethodCount=0
        #SET LoopNest=0
        @DECLARE_VARS
        @STATEMENTS
        //@TEST_STATEMENT
        @PRINTS
        #END_SCOPE
#END_RULE


@DECLARE_CHECKSUM_COLLECTION
    #BEGIN_RULE
        @DECLARE_CHECKSUM_COLLECTION_VARS_METHOD
        

        @DECLARE_CHECKSUM_LIST_VARS_METHOD
    #END_RULE

@DECLARE_PRINT_VARS_METHOD
    #BEGIN_RULE
        @DECLARE_PRINT_VARS_METHOD_int
        @DECLARE_PRINT_VARS_METHOD_short
        @DECLARE_PRINT_VARS_METHOD_byte
        @DECLARE_PRINT_VARS_METHOD_long
        @DECLARE_PRINT_VARS_METHOD_float
        @DECLARE_PRINT_VARS_METHOD_double

        @DECLARE_PRINT_VARS_METHOD_Integer
        @DECLARE_PRINT_VARS_METHOD_Short
        @DECLARE_PRINT_VARS_METHOD_Byte
        @DECLARE_PRINT_VARS_METHOD_Long
        @DECLARE_PRINT_VARS_METHOD_Float
        @DECLARE_PRINT_VARS_METHOD_Double

        @DECLARE_PRINT_VARS_METHOD_String
    #END_RULE

@DECLARE_PRINT_COLLECTION_VARS_METHOD
    #BEGIN_RULE
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_int
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_short
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_byte
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_long
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_float
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_double

        @DECLARE_PRINT_COLLECTION_VARS_METHOD_Integer
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_Short
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_Byte
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_Long
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_Float
        @DECLARE_PRINT_COLLECTION_VARS_METHOD_Double

        @DECLARE_PRINT_COLLECTION_VARS_METHOD_String
    #END_RULE



@PRINTS
    #BEGIN_RULE:IsARegularConfiguration
        //@ASSIGN_METHOD_RESULT
        @ASSIGN_METHODS_RESULTS
        @PRINT_VARS
    #END_RULE
    #BEGIN_RULE:1-IsARegularConfiguration
                @CUSTOM_PRINTS
    #END_RULE


@PRINT_VARS
    #BEGIN_RULE

        @PRINT_VARS_int
        @PRINT_VARS_byte
        @PRINT_VARS_short
        @PRINT_VARS_long
        @PRINT_VARS_float
        @PRINT_VARS_double
        @PRINT_VARS_Integer
        @PRINT_VARS_Byte
        @PRINT_VARS_Short
        @PRINT_VARS_Long
        @PRINT_VARS_Float
        @PRINT_VARS_Double

        @PRINT_VARS_String
    #END_RULE

@ASSIGN_METHODS_RESULTS
	#BEGIN_RULE:2*(MaxExplicitCallsInMain-ExplicitCallsInMain)
        #SET ExplicitCallsInMain=ExplicitCallsInMain+1
		@ASSIGN_METHOD_RESULT @ASSIGN_METHODS_RESULTS 
	#END_RULE
	#BEGIN_RULE:1
        #SET ExplicitCallsInMain=ExplicitCallsInMain+1
        @ASSIGN_METHOD_RESULT
	#END_RULE
	#BEGIN_RULE:1-(MaxExplicitCallsInMain-ExplicitCallsInMain)
	#END_RULE

@ASSIGN_METHOD_RESULT
        #APPEND_RULE:1
	    #END_RULE


//@funcWithCondListGeneric
//    #BEGIN_RULE
//        `funcWithCondListGeneric`
//    #END_RULE
//
//@funcWithCondListGeneric_DECLARE
//    #BEGIN_RULE
//        \n `public static <T> T ` @funcWithCondListGeneric `(List<T> a, T compareValue)` \n
//    #END_RULE
//
//@funcWithCondListGeneric_BODY
//    #BEGIN_RULE
//        ` { ` \n
//        `    T sum = compareValue; ` \n
//        ` ListIterator listIter = a.listIterator();` \n
//        ` while (listIter.hasNext()) {` \n
//        `       T tmp = (T)listIter.next();` \n
//        `       if (tmp == compareValue ) sum = tmp;` \n
//            `}` \n
//        ` return sum ; ` \n
//        `}` \n \n
//
//    #END_RULE
