#INCLUDE "configs_java/expressionsCommon.fg"  (int short byte long float double Integer Short Byte Long Float Double String)
#INCLUDE "configs_java/expressionsPrimitives.fg"  (int short byte long float double)
#INCLUDE "configs_java/expressionsReferences.fg"  (Integer Short Byte Long Float Double)
#INCLUDE "configs_java/parametersByType.fg" (boolean Boolean) (Val Var)

@Boolean_CONSTANT
@boolean_CONSTANT
@REUSE_ID_Boolean_VAL
@REUSE_ID_Boolean_VAR
@REUSE_ID_boolean_VAL
@REUSE_ID_boolean_VAR
@BIN_EXPR_IntegerInteger_Boolean
@BIN_EXPR_LongLong_Boolean
@BIN_EXPR_FloatFloat_Boolean
@BIN_EXPR_DoubleDouble_Boolean
@BIN_EXPR_intint_boolean
@BIN_EXPR_longlong_boolean
@BIN_EXPR_floatfloat_boolean
@BIN_EXPR_doubledouble_boolean


@byte_EXPRESSION_SPECIFIC
    #APPEND_RULE:5
        `(byte)(` @int_EXPRESSION_COMMON `)`
    #END_RULE
    #APPEND_RULE:5
        `(byte)(` @short_EXPRESSION_COMMON `)`
    #END_RULE
    #APPEND_RULE:5
        `(byte)(` @long_EXPRESSION_COMMON `)`
    #END_RULE
    #APPEND_RULE:1
        @Byte_EXPRESSION
    #END_RULE

@Byte_EXPRESSION_SPECIFIC
    #APPEND_RULE:1
        @byte_EXPRESSION
    #END_RULE


@short_EXPRESSION_SPECIFIC
    #APPEND_RULE:5
        `(short)(` @int_EXPRESSION_COMMON `)`
    #END_RULE
    #APPEND_RULE:5
        @byte_EXPRESSION_COMMON 
    #END_RULE
    #APPEND_RULE:5
        `(short)(` @long_EXPRESSION_COMMON `)`
    #END_RULE
    #APPEND_RULE:1
        @Short_EXPRESSION
    #END_RULE

@Short_EXPRESSION_SPECIFIC
    #APPEND_RULE:1
        @short_EXPRESSION
    #END_RULE


@int_EXPRESSION_SPECIFIC
    #APPEND_RULE
         @Integer_EXPRESSION_COMMON
    #END_RULE
    #APPEND_RULE
         @short_EXPRESSION
    #END_RULE
    #APPEND_RULE
         @byte_EXPRESSION
    #END_RULE
    #APPEND_RULE:(intVarDeclared+intFieldVarDeclared)*(1-lambdaVal)
         @REUSE_ID_int_VAR `++`
    #END_RULE
    #APPEND_RULE:(intVarDeclared+intFieldVarDeclared)*(1-lambdaVal)
        `++` @REUSE_ID_int_VAR 
    #END_RULE
    #APPEND_RULE:(intVarDeclared+intFieldVarDeclared)*(1-lambdaVal)
         @REUSE_ID_int_VAR `--`
    #END_RULE
    #APPEND_RULE:(intVarDeclared+intFieldVarDeclared)*(1-lambdaVal)
        `--` @REUSE_ID_int_VAR 
    #END_RULE
    #APPEND_RULE:StringVarWeight*(StringVarDeclared+StringValDeclared)
        @int_String_EXPRESSION 
    #END_RULE
  

@int_String_EXPRESSION_RECURSIVE 
    #APPEND_RULE:StringVarDeclared*StringVarWeight*(1-lambdaVal)
         @REUSE_ID_String_VAR `.indexOf(` @int_EXPRESSION   `)`
    #END_RULE
    #APPEND_RULE:StringVarDeclared*StringVarWeight*(1-lambdaVal)
         @REUSE_ID_String_VAR `.indexOf(` @int_EXPRESSION `,` @int_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE:StringValDeclared*StringVarWeight*(1-lambdaVal)
         @REUSE_ID_String_VAL `.lastIndexOf(` @int_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE:StringValDeclared*StringVarWeight
         @REUSE_ID_String_VAL `.lastIndexOf(` @int_EXPRESSION `,` @int_EXPRESSION `)`
    #END_RULE
   #APPEND_RULE:StringValDeclared*StringVarWeight
         @REUSE_ID_String_VAL `.indexOf(` @String_EXPRESSION `,` @int_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE:StringValDeclared*StringVarWeight
         @REUSE_ID_String_VAL `.lastIndexOf(` @String_EXPRESSION `,` @int_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE
         @String_CONSTANT `.length()`
    #END_RULE

    @int_String_EXPRESSION_NOT_RECURSIVE 
    #APPEND_RULE:StringVarDeclared*(1-lambdaVal)
         @REUSE_ID_String_VAR `.length()`
    #END_RULE
    #APPEND_RULE:StringValDeclared
         @REUSE_ID_String_VAL `.length()`
    #END_RULE
    #APPEND_RULE
         @String_CONSTANT `.length()`
    #END_RULE
 #APPEND_RULE:StringVarDeclared*StringVarWeight*(1-lambdaVal)
         @REUSE_ID_String_VAR `.indexOf(` @String_EXPRESSION `)`
    #END_RULE
     #APPEND_RULE:StringVarDeclared*StringVarWeight*(1-lambdaVal)
         @REUSE_ID_String_VAR `.lastIndexOf(` @String_EXPRESSION `)`
    #END_RULE


 @int_String_EXPRESSION
    #BEGIN_RULE:1*(intStringExprMaxDepth+-1*intStringExprDepth)*(StringVarDeclared+StringValDeclared)
      #SET intStringExprDepth=intStringExprDepth+1
      @int_String_EXPRESSION_RECURSIVE
      #SET intStringExprDepth=intStringExprDepth+-1
    #END_RULE
    #BEGIN_RULE:5
      @int_String_EXPRESSION_NOT_RECURSIVE
    #END_RULE






@Integer_EXPRESSION_SPECIFIC
    #APPEND_RULE
         @int_EXPRESSION_COMMON
    #END_RULE
    #APPEND_RULE
         `(int)(` @int_EXPRESSION `)`
    #END_RULE
    
@float_EXPRESSION_SPECIFIC
    #APPEND_RULE:5
        `(float)(` @double_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE
         @Float_EXPRESSION
    #END_RULE
    
@Float_EXPRESSION_SPECIFIC
    #APPEND_RULE
         @float_EXPRESSION
    #END_RULE

@double_EXPRESSION_SPECIFIC
    #APPEND_RULE:10
        `(double)(` @int_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE:10
        `(double)(` @long_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE
         @Double_EXPRESSION
    #END_RULE
    #APPEND_RULE:5
         @MATHPOW
    #END_RULE
    #APPEND_RULE:5
         @MATHEXP
    #END_RULE
    #APPEND_RULE:5
         @MATHLOG
    #END_RULE
    #APPEND_RULE:5
         @MATHLOG10
    #END_RULE
    #APPEND_RULE:4
         @SQRT
    #END_RULE
   
@Double_EXPRESSION_SPECIFIC
    #APPEND_RULE
         @double_EXPRESSION
    #END_RULE

@long_EXPRESSION_SPECIFIC
    #APPEND_RULE:5
        `(long)(` @int_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE:5
        @int_EXPRESSION
    #END_RULE
    #APPEND_RULE:5
        @Long_EXPRESSION
    #END_RULE
    
@Long_EXPRESSION_SPECIFIC
    #APPEND_RULE:5
        @long_EXPRESSION_COMMON
    #END_RULE
    #APPEND_RULE:5
        `(long)(`@long_EXPRESSION_SPECIFIC `)`
    #END_RULE


@boolean_EXPRESSION_NOT_RECURSIVE
    #APPEND_RULE
        @boolean_CONSTANT
    #END_RULE
    #APPEND_RULE:2*booleanValDeclared
        @REUSE_ID_boolean_VAL
    #END_RULE
    #APPEND_RULE:5*booleanVarDeclared
        @REUSE_ID_boolean_VAR
    #END_RULE
    #APPEND_RULE:1*BooleanValDeclared
        @REUSE_ID_Boolean_VAL
    #END_RULE
    #APPEND_RULE:1*BooleanVarDeclared
        @REUSE_ID_Boolean_VAR
    #END_RULE
    #APPEND_RULE:10
        @ARRAYEQUALS
    #END_RULE
    #APPEND_RULE:10*StringVarDeclared*(1-lambdaVal)
        `(` @REUSE_ID_String_VAR `.equals( ` @String_EXPRESSION ` ))`
    #END_RULE
    #APPEND_RULE:10*StringValDeclared
        `(` @REUSE_ID_String_VAL `.equals( ` @String_EXPRESSION ` ))`
    #END_RULE


@boolean_EXPRESSION_RECURSIVE
   #APPEND_RULE:10
       `(` @boolean_EXPRESSION `) ? ` @boolean_EXPRESSION ` : ` @boolean_EXPRESSION
   #END_RULE
   #APPEND_RULE:10
       `(` @boolean_EXPRESSION @OP_booleanboolean_boolean  @boolean_EXPRESSION `)`
   #END_RULE
   #APPEND_RULE:10
       `(` @OP_boolean_boolean  @boolean_EXPRESSION  `)`
   #END_RULE



@boolean_EXPRESSION
   #BEGIN_RULE:1*(booleanExprMaxDepth+-1*booleanExprDepth)
   #SET booleanExprDepth=booleanExprDepth+1
   @boolean_EXPRESSION_RECURSIVE
       #SET booleanExprDepth=booleanExprDepth+-1
       #END_RULE
        #BEGIN_RULE:3
        @boolean_EXPRESSION_NOT_RECURSIVE
            #END_RULE



@Boolean_EXPRESSION
    #APPEND_RULE
        @boolean_EXPRESSION
    #END_RULE

@String_EXPRESSION_NOT_RECURSIVE
    #APPEND_RULE
        @String_CONSTANT
    #END_RULE
    #APPEND_RULE:8*StringValDeclared
        @REUSE_ID_String_VAL
    #END_RULE
    #APPEND_RULE:5*StringVarDeclared*(1-lambdaVal)
        @REUSE_ID_String_VAR
    #END_RULE
     #APPEND_RULE:10*StringArrayVarDeclared*StringVarWeight*(1-lambdaVal)
         @REUSE_ID_String_ARRAY_VAR `[0]` 
    #END_RULE
    #APPEND_RULE:20*StringVarDeclared*(1-lambdaVal)
        #REUSE_ID StringVar_`.substring(` #GET_LAST_ID StringVar_ `.length()/` @[1:10] `)`
    #END_RULE
    #APPEND_RULE:20*StringValDeclared
        #REUSE_ID StringVal_`.substring(` #GET_LAST_ID StringVal_ `.length()/` @[1:10] `)`
    #END_RULE

    @String_EXPRESSION_RECURSIVE
    #APPEND_RULE:20*method_String_StringDeclared*MethodOneArgWeight
        @REUSE_ID_METHOD_String_String `(` @String_EXPRESSION `)`
    #END_RULE
//    #APPEND_RULE:1*(1-LoopNest)
//        `(` @String_EXPRESSION @OP_StringString_String  @String_EXPRESSION `)`
//    #END_RULE
    #APPEND_RULE:2*(1-LoopNest)
        `( ` @String_EXPRESSION ` .concat(` @String_EXPRESSION ` ))`
    #END_RULE
    #APPEND_RULE:20*TryCatchDepth
         @String_EXPRESSION `.substring(` @int_EXPRESSION `,` @int_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE:20*TryCatchDepth
         @String_EXPRESSION `.substring(` @int_EXPRESSION `)`
    #END_RULE
    #APPEND_RULE:20*TryCatchDepth
         @String_EXPRESSION `.substring(` @int_EXPRESSION `)`
    #END_RULE
#APPEND_RULE:20
        @String_EXPRESSION `.toLowerCase()`
    #END_RULE
    #APPEND_RULE:20
        @String_EXPRESSION `.toUpperCase()`
    #END_RULE
     #APPEND_RULE:10
        `String.valueOf( ` @int_EXPRESSION ` )`
    #END_RULE
    #APPEND_RULE:10
        `String.valueOf( ` @long_EXPRESSION ` )`
    #END_RULE
    #APPEND_RULE:10
        `String.valueOf( ` @byte_EXPRESSION ` )`
    #END_RULE
    #APPEND_RULE:10
        `String.valueOf( ` @short_EXPRESSION ` )`
    #END_RULE
    #APPEND_RULE:10
        `String.valueOf( ` @float_EXPRESSION ` )`
    #END_RULE
    #APPEND_RULE:10
        `String.valueOf( ` @double_EXPRESSION ` )`
    #END_RULE
    #APPEND_RULE:10
        `String.valueOf( ` @boolean_EXPRESSION ` )`
    #END_RULE
   

@String_EXPRESSION
   #BEGIN_RULE:1*(StringExprMaxDepth+-1*StringExprDepth)
   #SET StringExprDepth=StringExprDepth+1
   @String_EXPRESSION_RECURSIVE
       #SET StringExprDepth=StringExprDepth+-1
       #END_RULE
        #BEGIN_RULE:2
        @String_EXPRESSION_NOT_RECURSIVE
            #END_RULE



@LIST_TO_INT_FUNC
#BEGIN_RULE
`sum`
#END_RULE
#BEGIN_RULE
`min`
#END_RULE
#BEGIN_RULE
`max`
#END_RULE
