#INCLUDE "configs_java/statementsByType.fg" (int short byte long float double Integer Short Byte Long Float Double)
#INCLUDE "configs_java/loops.fg" (int short byte long) 
#INCLUDE "configs_java/synchronizedBlock.fg"
#INCLUDE "configs_java/intrinsic.fg" (int short byte long float double Integer Short Byte Long Float Double)

@Boolean_EXPRESSION

@TEST_STATEMENT
    #BEGIN_RULE
    \n  ` // Statements probability = ` @[1000+(StatementProb+-1*LoopNest)*(MaxStatementsInMethodCount+-1*StatementsInMethodCount):1001+(StatementProb+-1*LoopNest)*(MaxStatementsInMethodCount+-1*StatementsInMethodCount)] ` - 1000` \n
    ` // intFieldVarDeclared = ` @[intFieldVarDeclared:intFieldVarDeclared+1] \n
    ` // byteFieldVarDeclared = ` @[byteFieldVarDeclared:byteFieldVarDeclared+1] \n
    ` // longFieldVarDeclared = ` @[longFieldVarDeclared:longFieldVarDeclared+1] \n
    ` // floatFieldVarDeclared = ` @[floatFieldVarDeclared:floatFieldVarDeclared+1] \n
    ` // doubleFieldVarDeclared = ` @[doubleFieldVarDeclared:doubleFieldVarDeclared+1] \n
    #END_RULE

@STATEMENTS
    #BEGIN_RULE:(StatementProb+-1*LoopNest)*(MaxStatementsInMethodCount+-1*StatementsInMethodCount)
        @STATEMENT @STATEMENTS
    #END_RULE
    #BEGIN_RULE:2*StatementProb*(1+LoopNest)
    #END_RULE

@STATEMENTS_SHORT
    #BEGIN_RULE:(StatementProb+-2*LoopNest)*(MaxStatementsInMethodCount+-1*StatementsInMethodCount)
        @STATEMENT @STATEMENTS_SHORT
    #END_RULE
    #BEGIN_RULE:15
    #END_RULE


@STATEMENT
    #BEGIN_RULE
        #SET StatementsInMethodCount=StatementsInMethodCount+1
        @STATEMENT_ ` `
    #END_RULE

@STATEMENT_
    //#BEGIN_RULE:60*(MaxLoopCount+-1*LoopCount)+3
    #BEGIN_RULE:500
        @ASSIGN
    #END_RULE
   #BEGIN_RULE:8*(MaxCondCount+-1*CondCount)*(MaxCondNest+-1*CondNest)
        #SET CondNest=CondNest+1
        #SET CondCount=CondCount+1
        @CONDITIONAL
         #SET CondNest=CondNest+-1
    #END_RULE                                               
  
    #BEGIN_RULE:1*(MaxLoopCount+-1*LoopCount)*(MaxLoopNest+-1*LoopNest+-1*LongLoop)*(MaxLoopNest+-1*LoopNest+-1*LongLoop)*(1+5*TryCatchDepth)       
	#SET LoopCount=LoopCount+1
        #SET LoopNest=LoopNest+1
        @LOOP
        #SET LoopNest=LoopNest+-1
    #END_RULE
    #BEGIN_RULE:20*(MaxSynchronizedBlockNestDepth+-1*SynchronizedBlockNestDepth)*AnotherClassObjVarDeclared
        @SYNCHRONIZED_BLOCK
    #END_RULE
 
    #BEGIN_RULE:((MaxLoopCount+-1*LoopCount)+1)*0
	@MATCH
    #END_RULE

    #BEGIN_RULE:15*(MaxLoopNest+-2*LoopNest)*(MaxTryCatchDepth+-1*TryCatchDepth)
	    @TRY_CATCH
    #END_RULE

    #BEGIN_RULE:10*(MaxLoopNest+-2*LoopNest)*TryCatchDepth
	    @THROW_EXCEPTION
    #END_RULE
    
    #BEGIN_RULE:10+TryCatchDepth*30
	    @ARRAYCOPY
    #END_RULE

    #BEGIN_RULE:10+TryCatchDepth*30
	    @ARRAYCOPYOF
    #END_RULE

    #BEGIN_RULE:8*(20+-1*MethodCallCount)*0
	#SET MethodCallCount=MethodCallCount+1
	@METHOD_MAP
    #END_RULE


    #BEGIN_RULE:0
	@COLLECTION_VAL
    #END_RULE

@STATEMENT1
    #BEGIN_RULE:30*(MaxLoopCount+-1*LoopCount)+3
        @ASSIGN 
    #END_RULE
    #BEGIN_RULE:(MaxCondCount+-1*CondCount)*(MaxCondNest+-1*CondNest)
        #SET CondNest=CondNest+1
        #SET CondCount=CondCount+1
        @CONDITIONAL
         #SET CondNest=CondNest+-1
    #END_RULE                                               

    @ASSIGN
        #APPEND_RULE:40*booleanVarDeclared
        @ASSIGN_boolean_VAR
    #END_RULE
        #APPEND_RULE:10*BooleanVarDeclared
        @ASSIGN_Boolean_VAR
    #END_RULE

@ASSIGN_Boolean_VAR
    #BEGIN_RULE
        @REUSE_ID_Boolean_VAR ` = ` @Boolean_EXPRESSION `; ` \n
    #END_RULE

@ASSIGN_boolean_VAR
    #BEGIN_RULE
        @REUSE_ID_boolean_VAR ` = ` @boolean_EXPRESSION `; ` \n
    #END_RULE
    
@IF
    #BEGIN_RULE:10
        `if ( ` @boolean_EXPRESSION ` ) { ` @STATEMENT ` } else { ` @STATEMENT ` } `  \n
    #END_RULE
    #BEGIN_RULE:7
        `if ( ` @boolean_EXPRESSION ` ) { ` \n @STATEMENTS  \n ` } ` \n
    #END_RULE
    #BEGIN_RULE:7
        `if ( ` @boolean_EXPRESSION ` ) { ` \n @STATEMENTS \n ` } else { ` \n @STATEMENTS \n ` } `  \n
    #END_RULE  
    #BEGIN_RULE:2
        `if ( ` @boolean_EXPRESSION ` ) { ` \n @STATEMENTS \n ` } else ` @IF 
    #END_RULE  

@SWITCH
    #BEGIN_RULE:10*intVarDeclared
        @SWITCH_int
    #END_RULE
    #BEGIN_RULE:10*byteVarDeclared
        @SWITCH_byte
    #END_RULE
    #BEGIN_RULE:10*shortVarDeclared
        @SWITCH_short
    #END_RULE
    #BEGIN_RULE
    #END_RULE
       
@CONDITIONAL
    #BEGIN_RULE:10
        @IF
    #END_RULE  
    #BEGIN_RULE:1
        @SWITCH
    #END_RULE
       


      



@MATCH
    #APPEND_RULE:4
    #END_RULE  

@MATCH_STRING
    #APPEND_RULE:4
    #END_RULE  

@TRY_CATCH
    #BEGIN_RULE:4
        #SET TryCatchDepth=TryCatchDepth+1
        `try { ` \n 
            @STATEMENTS   \n
        `} catch (Exception ` #CREATE_ID exVar_ ` ) {` \n
        #SET TryCatchDepth=TryCatchDepth+-1
            `//  System.out.println(` #GET_LAST_ID exVar_ `.getClass().getCanonicalName());  ` \n
            @STATEMENTS_SHORT
        `} ` \n
        @FINALLY
    #END_RULE  


@FINALLY
    #BEGIN_RULE:1
        ` finally { ` \n
         @STATEMENT `; ` \n
        ` } ` \n
#END_RULE
#BEGIN_RULE:5
#END_RULE


@THROW_EXCEPTION
    #BEGIN_RULE:1
        `if ( ` @Boolean_EXPRESSION ` ) throw new ` @EXCEPTION `; ` \n \n
    #END_RULE

@EXCEPTION
#BEGIN_RULE
    ` ArithmeticException() `
#END_RULE
#BEGIN_RULE
    ` IndexOutOfBoundsException() `
#END_RULE
#BEGIN_RULE
    ` ArrayIndexOutOfBoundsException() `
#END_RULE
#BEGIN_RULE
    ` StringIndexOutOfBoundsException() `
#END_RULE
#BEGIN_RULE
    ` java.io.IOException() `
#END_RULE
#BEGIN_RULE
    ` NullPointerException() `
#END_RULE
#BEGIN_RULE
    ` NumberFormatException() `
#END_RULE

@METHOD_MAP
#APPEND_RULE
        \n ` ; ` \n
#END_RULE



