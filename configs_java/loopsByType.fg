#INCLUDE "configs_java/expressions.fg" 
//#INCLUDE "configs_java/list.fg" $1
//#INCLUDE "configs_java/numericTypesCommon.fg" $1 int
#INCLUDE "configs_java/arrayTypes.fg" $1  


//#SET MaxArrayCount=1000

//@$1_EXPRESSION
//@int_EXPRESSION
//@boolean_EXPRESSION
//@Boolean_EXPRESSION

@STATEMENTS
@STATEMENT
@STATEMENTS_WITH_ACCESS_ARRAY_BY_LOOP_$2_INDUCTION_VAR
  
@LOOP_CNT_LOWER_LIMIT
@LOOP_CNT_LOWER_LIMIT_ARRAY_SAFE
@LOOP_CNT_LOWER_LIMIT_NOT_ARRAY_SAFE
@LOOP_CONDITION
@LOOP_RANGE_STEP
@LOOP_RANGE_STEP_NEG
@TO_OR_UNTIL
@LOOP_RANGE_ARRAY_SAFE
@LOOP_RANGE_int
@LOOP_RANGE_ARRAY_SAFE_SET
@LOOP_RANGE_ARRAY_SAFE_LIST
@FOR_LOOP_ARRAY_UNSAFE
@FOR_WITH_BREAK

@ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR
    #BEGIN_RULE:100*$2VarDeclared
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[ ` @$2TointType #REUSE_LOCAL_ID $2Var_ ` + ` @[0:5]  ` ] `
    #END_RULE
    #BEGIN_RULE:10*$2ValDeclared
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[ ` @$2TointType #REUSE_LOCAL_ID $2Val_ ` + ` @[0:5]  ` ] `
    #END_RULE
    #BEGIN_RULE:100*$2IndVarDeclared
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[ ` @$2TointType #REUSE_ID $2IndVar_ ` + ` @[0:5]  ` ] `
    #END_RULE
    #BEGIN_RULE:2
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[ 0 ]`
    #END_RULE



@SINGLE_STATEMENT_WITH_ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR
    #BEGIN_RULE:5
        @STATEMENT
    #END_RULE 
    #BEGIN_RULE:5*($1ArrayVarDeclared+$1ArrayValDeclared)
        @ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR ` = ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `; `
    #END_RULE 
    #BEGIN_RULE:5*($1ArrayVarDeclared+$1ArrayValDeclared)*$1VarDeclared
        @REUSE_ID_$1_VAR ` = ` @$1_CAST_OPEN @ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR @$1_CAST_CLOSE `; `
    #END_RULE 

@STATEMENTS_WITH_ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR
    #BEGIN_RULE:3
        @SINGLE_STATEMENT_WITH_ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR \n @STATEMENTS_WITH_ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR
    #END_RULE 
    #BEGIN_RULE:2
    #END_RULE 

 @SINGLE_STATEMENT_WITH_ACCESS_ARRAY_BY_LOOP_$2_INDUCTION_VAR_
    #APPEND_RULE:Enable$1
        @SINGLE_STATEMENT_WITH_ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR
    #END_RULE



@DECLARE_$2_IND_VAR
#APPEND_RULE
        #SET $2IndVarDeclared=$2IndVarDeclared+1
        ` $2 ` @DECLARE_ID_$2_IND_VAR ` = ` @$2_CONSTANT @$2_CONSTANT_SUFFIX `; `  
#END_RULE

@DECLARE_LAZY_$2_IND_VAR
#APPEND_RULE
        ` $2 ` @DECLARE_LAZY_ID_$2_IND_VAR ` = ` @$2_CONSTANT @$2_CONSTANT_SUFFIX `; `
        #SET $2IndVarDeclared=$2IndVarDeclared+1
#END_RULE



        @DECLARE_ID_$2_IND_VAR
#BEGIN_RULE
#CREATE_ID $2IndVar_
#END_RULE

@DECLARE_LAZY_ID_$2_IND_VAR
#BEGIN_RULE
#CREATE_LAZY_ID $2IndVar_
#END_RULE


        @REUSE_ID_$2_IND_VAR
#BEGIN_RULE
#REUSE_ID $2IndVar_
#END_RULE

@FOR_LOOP_YIELD_$1
    #APPEND_RULE:1
        ` for ( `
        #BEGIN_SCOPE
        @DECLARE_LAZY_ID_int_VAL ` <- ` @LOOP_RANGE_int
        #REGISTER_LAZY_IDS
        #SET intValDeclared=intValDeclared+1
        @LOOP_CONDITION ` ) yield { ` \n @$1_EXPRESSION
        #SET intValDeclared=intValDeclared+-1
        #END_SCOPE
    \n `} `\n
#END_RULE
 #APPEND_RULE:1*$1ArrayVarDeclared
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE
        #SET intValDeclared=intValDeclared+1
        #REGISTER_LAZY_IDS @LOOP_CONDITION ` ) yield { ` \n  @ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR \n 
        #SET intValDeclared=intValDeclared+-1
        #END_SCOPE 
        \n `} `\n
#END_RULE

@FOR_LOOP_YIELD_LIST_$1
#APPEND_RULE:1
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE_LIST 
        #REGISTER_LAZY_IDS  
        #SET intValDeclared=intValDeclared+1
        @LOOP_CONDITION ` ) yield { ` \n @$1_EXPRESSION 
        #SET intValDeclared=intValDeclared+-1
        #END_SCOPE 
        \n `} `\n
#END_RULE
#APPEND_RULE:1*$1ArrayVarDeclared
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE_LIST
        #SET intValDeclared=intValDeclared+1
        #REGISTER_LAZY_IDS @LOOP_CONDITION ` ) yield { ` \n  @ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR \n 
        #SET intValDeclared=intValDeclared+-1
        #END_SCOPE 
        \n `} `\n
#END_RULE


@FOR_LOOP_YIELD_SET_$1
#APPEND_RULE:1
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE_SET 
        #REGISTER_LAZY_IDS  
        #SET intValDeclared=intValDeclared+1
        @LOOP_CONDITION ` ) yield { ` \n @$1_EXPRESSION 
        #SET intValDeclared=intValDeclared+-1
        #END_SCOPE 
        \n `} `\n
#END_RULE
#APPEND_RULE:1*$1ArrayVarDeclared
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE_SET
        #SET intValDeclared=intValDeclared+1
        #REGISTER_LAZY_IDS @LOOP_CONDITION ` ) yield { ` \n  @ACCESS_$1_ARRAY_BY_LOOP_$2_INDUCTION_VAR \n 
        #SET intValDeclared=intValDeclared+-1
        #END_SCOPE 
       \n `} `\n
#END_RULE

@TRY_CATCH_LOOP_WITH_ARRAY
#APPEND_RULE:$1VarDeclared
        //@REUSE_ID_$1_VAR 
        //` = ` 
        `try { ` \n
            @FOR_LOOP_ARRAY_UNSAFE
            @$1_EXPRESSION \n
            ` } catch { ` \n
             `     case ex : ArrayIndexOutOfBoundsException => { ` @$1_EXPRESSION ` } ` \n
            ` } ` \n
#END_RULE


@TRY_BREAKABLE_BLOCK
#APPEND_RULE:$1VarDeclared
            @REUSE_ID_$1_VAR `= scala.util.control.Breaks.tryBreakable { ` \n
            #SET intValDeclared=intValDeclared+1
                @FOR_WITH_BREAK \n
            #SET intValDeclared=intValDeclared+-1
                    @int_EXPRESSION \n
                    `} catchBreak { ` \n
                        @int_EXPRESSION \n
                            `}` \n
#END_RULE

