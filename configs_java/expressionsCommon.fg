#INCLUDE "configs_java/intrinsic.fg"  $1

//debug1

@funcWithCondListGeneric

@bool_EXPRESSION
    #BEGIN_RULE:2
        @boolean_EXPRESSION
    #END_RULE
    #BEGIN_RULE:1
        @Boolean_EXPRESSION
    #END_RULE

@OP_$1$1_bool
    #BEGIN_RULE:2
        @OP_$1$1_boolean
    #END_RULE
    #BEGIN_RULE:1
        @OP_$1$1_Boolean
    #END_RULE

@ARRAY_SAFE_INDEX_ADD
    #BEGIN_RULE
        ` + ` @[1:8]
    #END_RULE
    #BEGIN_RULE:2
    #END_RULE
        


@REUSE_ID_$1_ARRAY_VAR_OR_VAL_BY_IND_ARRAY_SAFE_VAR
    #APPEND_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_))
    #REUSE_ID $1ArrayVa%_ `[` #GET_LAST_ID $1ArrayVa%_ `.length / ` @[2:10] ` ]`
    #END_RULE
    #APPEND_RULE:(&IDsCount($1ArrayFieldVar_)+&IDsCount($1ArrayFieldVal_))
    #REUSE_ID $1ArrayFieldVa%_ `[` #GET_LAST_ID $1ArrayFieldVa%_ `.length / ` @[2:10] ` ]`
    #END_RULE
    #APPEND_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVal_)+&IDsCount($1ArrayFieldVar_))*(&IDsCount($1IndArraySafeVar_))*$1IsIndexType
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[` #REUSE_ID  $1IndArraySafeVar_ @ARRAY_SAFE_INDEX_ADD ` ]`
    #END_RULE
    #APPEND_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVal_)+&IDsCount($1ArrayFieldVar_))*(4*&IDsCount($1StaticIndArraySafeFieldVar_))*$1IsIndexType
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[` #REUSE_ID  $1StaticIndArraySafeFieldVar_ @ARRAY_SAFE_INDEX_ADD ` ]`
    #END_RULE
//    #BEGIN_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*&IDsCount(byteIndArraySafeVar_)
//        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[` #REUSE_ID  byteIndArraySafeVar_ @ARRAY_SAFE_INDEX_ADD ` ]`
//    #END_RULE
//    #BEGIN_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*&IDsCount(shortIndArraySafeVar_)
//        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[` #REUSE_ID  shortIndArraySafeVar_ @ARRAY_SAFE_INDEX_ADD ` ]`
//    #END_RULE
//    #BEGIN_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*&IDsCount(longIndArraySafeVar_)
//        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[(int)(` #REUSE_ID  longIndArraySafeVar_ @ARRAY_SAFE_INDEX_ADD `) ]`
//    #END_RULE
//
@REUSE_ID_$1_ARRAY_VAR_OR_VAL_BY_IND_VAR
    #BEGIN_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*(&IDsCount(intIndVar_))
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[` #REUSE_ID  intIndVar_ @ARRAY_SAFE_INDEX_ADD ` ]`
    #END_RULE
    #BEGIN_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*&IDsCount(byteIndVar_)
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[ (byte)(` #REUSE_ID  byteIndVar_ @ARRAY_SAFE_INDEX_ADD `) ]`
    #END_RULE
    #BEGIN_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*&IDsCount(shortIndVar_)
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[ (short)(` #REUSE_ID  shortIndVar_ @ARRAY_SAFE_INDEX_ADD `) ]`
    #END_RULE
    #BEGIN_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*&IDsCount(longIndVar_)
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[(int)(` #REUSE_ID  longIndVar_ @ARRAY_SAFE_INDEX_ADD `) ]`
    #END_RULE


@REUSE_ID_$1_ANY_IND_VAR 
    #BEGIN_RULE:&IDsCount($1IndVar_)
        #REUSE_ID $1IndVar_
    #END_RULE
    #BEGIN_RULE:&IDsCount($1IndArraySafeVar_)
        #REUSE_ID $1IndArraySafeVar_
    #END_RULE
    #BEGIN_RULE:$1IsIndexType*&IDsCount($1StaticIndArraySafeFieldVar_)
        #REUSE_ID $1StaticIndArraySafeFieldVar_
    #END_RULE

@REUSE_ID_ANY_IND_VAR 
    #APPEND_RULE
        @REUSE_ID_$1_ANY_IND_VAR
    #END_RULE

@RECURSIVE_FUNCTION_ARG_LIMITATION
    #BEGIN_RULE
        @[2:5]
    #END_RULE


@$1_EXPRESSION_RECURSIVE
    #APPEND_RULE:1*(1-lambdaVal)*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_))/2
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[ Math.min( Math.abs(( ` @int_EXPRESSION ` ) / 2 ), ( ` @[MaxArrayCount/2:3*MaxArrayCount/4] `  )) ]`
    #END_RULE
    #APPEND_RULE:1*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_))
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[(` @int_EXPRESSION ` >>> 1) % ` @[MaxArrayCount/2:3*MaxArrayCount/4] `]`
    #END_RULE
    #APPEND_RULE:1*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVar_)+&IDsCount($1ArrayVal_)+&IDsCount($1ArrayFieldVal_))*TryCatchDepth*1000
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[` @int_EXPRESSION `]`
    #END_RULE
    #APPEND_RULE:5*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_)+&IDsCount($1Var_))*(1-lambdaVal)
        @UNARY_EXPR_$1_$1
    #END_RULE
    #APPEND_RULE:100*(1-$1IsStringType)
       @BIN_EXPR_$1$1_$1
   #END_RULE
   #APPEND_RULE:5
        `((` @bool_EXPRESSION `) ? ` @$1_EXPRESSION ` : ` @$1_EXPRESSION ` )`
    #END_RULE
   //#APPEND_RULE:3*(MethodCallInExprWeight+-2*MethodCallCount)*method_$1_$1Declared*(MaxLoopNest+-1*LoopNest)
   #APPEND_RULE:10*(MethodCallInExprWeight+-1*MethodCallCount)*(MaxLoopNestForMethodCall+-1*LoopNest)*(MethodIsInstance*(&IDsCount(method_$1_$1_Static_)+&IDsCount(method_$1_$1_Instance_)+&IDsCount(Cls_, method_$1_$1_Static_)+&IDsCount(Cls_, method_$1_$1_Instance_))+MethodIsStatic*(&IDsCount(method_$1_$1_Static_)+&IDsCount(Cls_, method_$1_$1_Static_)))*(1+-1*$1RecursiveFunction)*(1-LongLoop)*(MethodCallInExprWeight+-1*MethodCallCount)
    #SET MethodCallCount=MethodCallCount+1
        @REUSE_ID_METHOD_$1_$1 ` ( ` @$1_CAST_OPEN  @$1_EXPRESSION @$1_CAST_CLOSE ` )`
    #END_RULE
   //#APPEND_RULE:2*(MethodCallInExprWeight+-1*MethodCallCount)*(MaxLoopNestForMethodCall+-1*LoopNest)*(&IDsCount(recursive_function_$1_$1_Instance_)+&IDsCount(Cls_, recursive_function_$1_$1_Instance_)+&IDsCount(recursive_function_$1_$1_Static_)+&IDsCount(Cls_, recursive_function_$1_$1_Static_))*(1+-1*$1RecursiveFunction)*(1-LongLoop)
   #APPEND_RULE:2*(MethodCallInExprWeight+-1*MethodCallCount)*(MaxLoopNestForMethodCall+-1*LoopNest)*(MethodIsInstance*(&IDsCount(recursive_function_$1_$1_Static_)+&IDsCount(recursive_function_$1_$1_Instance_   )+&IDsCount(Cls_, recursive_function_$1_$1_Static_)+&IDsCount(Cls_, recursive_function_$1_$1_Instance_))+MethodIsStatic*(&IDsCount(recursive_function_$1_$1_Static_)+&IDsCount(Cls_, recursive_function_$1_$1_Static_)))*(1+-1*$1RecursiveFunction)*(1+-1*$1RecursiveFunction)*(1-LongLoop)
    #SET MethodCallCount=MethodCallCount+1
        @REUSE_ID_RECURSIVE_FUNCTION_$1_$1 ` ( ` @$1_CAST_OPEN  `(` @$1_EXPRESSION ` % ` @RECURSIVE_FUNCTION_ARG_LIMITATION  `)` @$1_CAST_CLOSE  ` )`
    #END_RULE
   #APPEND_RULE:100*(MethodCallInExprWeight+-1*MethodCallCount)*(MaxLoopNestForMethodCall+-1*LoopNest)*$1RecursiveFunctionInstance*(1-LongLoop)
    #SET MethodCallCount=MethodCallCount+1
        #GET_LAST_ID recursive_function_$1_$1_Instance_ ` ( ` @$1_CAST_OPEN `(` #GET_LAST_ID $1RecursiveFlagVar_  ` - 1) ` @$1_CAST_CLOSE `) `
    #END_RULE
   #APPEND_RULE:100*(MethodCallInExprWeight+-1*MethodCallCount)*(MaxLoopNestForMethodCall+-1*LoopNest)*$1RecursiveFunctionStatic*(1-LongLoop)
    #SET MethodCallCount=MethodCallCount+1
        #GET_LAST_ID recursive_function_$1_$1_Static_ ` ( ` @$1_CAST_OPEN `(` #GET_LAST_ID $1RecursiveFlagVar_  ` - 1) ` @$1_CAST_CLOSE `) `
    #END_RULE
    #APPEND_RULE:4000*(MethodCallInExprWeight+-1*MethodCallCount)*(MaxLoopNestForMethodCall+-1*LoopNest)*&IDsCount(method_$1_Static_OBJ_)*TestClass*extendsSprClsB
    #SET MethodCallCount=MethodCallCount+1
        #REUSE_ID method_$1_Static_OBJ_ `(new Test())`
    #END_RULE
    #APPEND_RULE:400*(MethodCallInExprWeight+-1*MethodCallCount)*(MaxLoopNestForMethodCall+-1*LoopNest)*&IDsCount(method_$1_Static_OBJ_)*TestClass*extendsSprClsB
    #SET MethodCallCount=MethodCallCount+1
        #REUSE_ID method_$1_Static_OBJ_ `(new Test())`
    #END_RULE
//   #APPEND_RULE:100*(MethodCallInExprWeight+-1*MethodCallCount)*(MaxLoopNestForMethodCall+-1*LoopNest)*(&IDsCount(recursive_function_$1_$1_Static_)+&IDsCount(Cls_, recursive_function_$1_$1_Static_))*$1RecursiveFunction*(1-LongLoop)*MethodIsStatic
//    #SET MethodCallCount=MethodCallCount+1
//        #GET_LAST_ID recursive_function_$1_$1_Static_ ` ( ` @$1_CAST_OPEN `(` #GET_LAST_ID $1RecursiveFlagVar_  ` - 1) ` @$1_CAST_CLOSE `) `
//    #END_RULE

    #APPEND_RULE:$1IsNumericType
        @MATHMIN_$1
    #END_RULE
    #APPEND_RULE:$1IsNumericType
        @MATHMAX_$1
    #END_RULE
    #APPEND_RULE:$1IsNumericType
        @MATHABS_$1
    #END_RULE
    #APPEND_RULE:4000*(lambdaFunctionOneArg$1+lambdaFunctionTwoArgs$1)*(MaxLambdaCount-lambdaCount)*(MaxLambdaDepth-lambdaDepth)*(MaxLambdaDepth-lambdaDepth)
        #SET lambdaDepth=lambdaDepth+1
        @$1_LAMBDA_EXPRESSION
        #SET lambdaDepth=lambdaDepth-1
    #END_RULE
    #APPEND_RULE:30*(&IDsCount($1ArrayListVar_)+&IDsCount($1ArrayListVal_)+&IDsCount($1ArrayListFieldVar_)+&IDsCount($1ArrayListFieldVal_))*ArrayListWeight*(MaxFuncWithCondListGeneric-funcWithCondListGenericCount)
            #SET funcWithCondListGenericCount=funcWithCondListGenericCount+1
            `Test.` @funcWithCondListGeneric `(` #REUSE_ID $1ArrayList%_ `, ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `, ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE ` )` 
    #END_RULE
    #APPEND_RULE:30*(&IDsCount($1LinkedListVar_)+&IDsCount($1LinkedListVal_)+&IDsCount($1LinkedListFieldVar_)+&IDsCount($1LinkedListFieldVal_))*LinkedListWeight*(MaxFuncWithCondListGeneric-funcWithCondListGenericCount)
            #SET funcWithCondListGenericCount=funcWithCondListGenericCount+1
            `Test.` @funcWithCondListGeneric `(` #REUSE_ID $1LinkedList%_ `, ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE `, ` @$1_CAST_OPEN @$1_EXPRESSION @$1_CAST_CLOSE ` )` 
    #END_RULE


@$1_EXPRESSION_NOT_RECURSIVE
    #APPEND_RULE:5
        @$1_LITERAL
    #END_RULE
    #APPEND_RULE:(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_))/2
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[ Math.min( Math.abs(( ` @int_LITERAL ` ) / 2 ), ( ` @[MaxArrayCount/2:3*MaxArrayCount/4] ` )) ]`
    #END_RULE
     #APPEND_RULE:30*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*(&IDsCount(intIndArraySafeVar_)+&IDsCount(byteIndArraySafeVar_)+&IDsCount(shortIndArraySafeVar_)+&IDsCount(longIndArraySafeVar_))*(1-lambdaVal)
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL_BY_IND_ARRAY_SAFE_VAR
    #END_RULE
    #APPEND_RULE:1*(&IDsCount($1IndVar_)+&IDsCount($1IndArraySafeVar_)+&IDsCount($1StaticIndArraySafeFieldVar_))*(1+20*TryCatchDepth)*(1-lambdaVal)
        @REUSE_ID_$1_ANY_IND_VAR
    #END_RULE
    #APPEND_RULE:20*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_)+&IDsCount($1ArrayVar_)+&IDsCount($1ArrayFieldVal_))*TryCatchDepth*100*(&IDsCount(intIndVar_)+&IDsCount(byteIndVar_)+&IDsCount(shortIndVar_)+&IDsCount(longIndVar_))*(1+LongLoop*100)*(1-lambdaVal)
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL_BY_IND_VAR
    #END_RULE
    #APPEND_RULE:(&IDsCount($1ArrayListVar_)+&IDsCount($1ArrayListVal_)+&IDsCount($1ArrayListFieldVar_)+&IDsCount($1ArrayListFieldVal_))*ArrayListWeight
        #REUSE_ID $1ArrayList%_ `.get(` @[1:MaxArrayListCount] ` % (`  #GET_LAST_ID $1ArrayList%_  `.size()+1 )*9/10)` 
    #END_RULE
    #APPEND_RULE:(&IDsCount($1LinkedListVar_)+&IDsCount($1LinkedListVal_)+&IDsCount($1LinkedListFieldVar_)+&IDsCount($1LinkedListFieldVal_))*LinkedListWeight
        #REUSE_ID $1LinkedList%_ `.get(` @[1:MaxLinkedListCount] ` % (`  #GET_LAST_ID $1LinkedList%_  `.size()+1 )*9/10)` 
    #END_RULE
    #APPEND_RULE:(&IDsCount($1LinkedListVar_)+&IDsCount($1LinkedListVal_)+&IDsCount($1LinkedListFieldVar_)+&IDsCount($1LinkedListFieldVal_))*LinkedListWeight
        #REUSE_ID $1LinkedList%_ `.` @getElementMethodLinkedList  `()` 
    #END_RULE


@$1_EXPRESSION_COMMON
    #BEGIN_RULE:1*(ExprMaxDepth+-1*ExprDepth)
        #SET ExprDepth=ExprDepth+1
        @$1_EXPRESSION_RECURSIVE
        #SET ExprDepth=ExprDepth+-1
    #END_RULE
    #BEGIN_RULE:3
        @$1_EXPRESSION_NOT_RECURSIVE
    #END_RULE

@UNARY_EXPR_$1_$1
    //#BEGIN_RULE:1*&IDsCount($1Var_)
    #BEGIN_RULE:MethodIsStatic*&IDsCount($1StaticFieldVar_)+MethodIsInstance*(&IDsCount($1StaticFieldVar_)+&IDsCount($1InstanceFieldVar_))+&IDsCount($1Var_)
        @PREFIX_OP_$1_$1 @REUSE_ID_$1_VAR
    #END_RULE
    //#BEGIN_RULE:1*&IDsCount($1Var_)
    #BEGIN_RULE:MethodIsStatic*&IDsCount($1StaticFieldVar_)+MethodIsInstance*(&IDsCount($1StaticFieldVar_)+&IDsCount($1InstanceFieldVar_))+&IDsCount($1Var_)
        @REUSE_ID_$1_VAR @POSTFIX_OP_$1_$1
    #END_RULE
    #BEGIN_RULE:1*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_))
        @PREFIX_OP_$1_$1 @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[(` @int_EXPRESSION ` >>> 1) % ` @[MaxArrayCount/2:3*MaxArrayCount/4] `]`
    #END_RULE
    #BEGIN_RULE:1*(&IDsCount($1ArrayVar_)+&IDsCount($1ArrayVal_))
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `[(` @int_EXPRESSION ` >>> 1) % ` @[MaxArrayCount/2:3*MaxArrayCount/4] `]` @POSTFIX_OP_$1_$1
    #END_RULE
        
       
@BIN_EXPR_$1$1_$1
    #BEGIN_RULE:BinExprMaxDepth+-1*BinExprDepth
        #SET BinExprDepth=BinExprDepth+1
        `( `@$1_EXPRESSION @OP_$1$1_$1 @$1_EXPRESSION ` )`
        #SET BinExprDepth=BinExprDepth+-1
    #END_RULE
    #BEGIN_RULE:1+-1*(BinExprMaxDepth+-1*BinExprDepth)
        `( ` @$1_EXPRESSION_NOT_RECURSIVE @OP_$1$1_$1 @$1_EXPRESSION_NOT_RECURSIVE ` )`
    #END_RULE

@$1_EXPRESSION_BLOCK
    #BEGIN_RULE:100*(ExprBlockMaxDepth+-1*ExprBlockDepth)
    #SET ExprBlockDepth=ExprBlockDepth+1
        ` { ` #BEGIN_SCOPE \n
   	@DECLARE_$1_VAR
    	`for ( ` #BEGIN_SCOPE @DECLARE_LAZY_ID_int_VAL  ` <- Range(0, `@[10:20]` ) ) { ` #REGISTER_LAZY_IDS \n
            #SET intValDeclared=intValDeclared+1
    	     @$1_EXPRESSION #END_SCOPE \n` } `\n
            #SET intValDeclared=intValDeclared+-1
    	@REUSE_ID_$1_VAR \n
    	#END_SCOPE ` } ` \n
    #SET $1VarDeclared=$1VarDeclared+-1
    #SET ExprBlockDepth=ExprBlockDepth+-1
    #END_RULE
    #BEGIN_RULE:1
    ` { ` #BEGIN_SCOPE \n
        @$1_EXPRESSION_NOT_RECURSIVE
    	#END_SCOPE ` } ` \n
        #END_RULE


@BIN_EXPR_$1$1_boolean
    #BEGIN_RULE:1*(booleanExprMaxDepth+-1*booleanExprDepth)
        #SET booleanExprDepth=booleanExprDepth+1
        `( ` @$1_EXPRESSION ` ` @OP_$1$1_bool ` ` @$1_EXPRESSION ` )`
    #SET booleanExprDepth=booleanExprDepth+-1
    #END_RULE
    #BEGIN_RULE:2*(booleanExprMaxDepth+-1*booleanExprDepth)*(&IDsCount($1Var_)+&IDsCount($1$2FieldVar_)+&IDsCount(Cls_, $1$2FieldVar_)+MethodIsInstance*(&IDsCount($1InstanceFieldVar_)+&IDsCount(Cls_, $1InstanceFieldVar_))*(1+20*InConstructorMethod)*(1+100*(extendsSprClsA+extendsSprClsB))+TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1StaticFieldVar_)*IsMethodObjArg+MethodIsInstance*10*TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1InstanceFieldVar_)*IsMethodObjArg+&IDsCount($1Val_)+&IDsCount($1$2FieldVal_)+&IDsCount(Cls_, $1$2FieldVal_)+MethodIsInstance*(&IDsCount($1InstanceFieldVal_)+&IDsCount(Cls_, $1InstanceFieldVal_))*(1+20*InConstructorMethod)*(1+100*(extendsSprClsA+extendsSprClsB))+TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1StaticFieldVal_)*IsMethodObjArg+MethodIsInstance*10*TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1InstanceFieldVal_)*IsMethodObjArg)
    //#BEGIN_RULE:2*(booleanExprMaxDepth+-1*booleanExprDepth)*(&IDsCount($1Var_)+&IDsCount($1$2FieldVar_)+&IDsCount(Cls_, $1$2FieldVar_)+MethodIsInstance*(&IDsCount($1InstanceFieldVar_)+&IDsCount(Cls_, $1InstanceFieldVar_))*(1+20*InConstructorMethod)*(1+100*(extendsSprClsA+extendsSprClsB))+TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1StaticFieldVar_)*IsMethodObjArg+MethodIsInstance*10*TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1InstanceFieldVar_)*IsMethodObjArg + &IDsCount($1Val_)+&IDsCount($1$2FieldVal_)+&IDsCount(Cls_, $1$2FieldVal_)+MethodIsInstance*(&IDsCount($1InstanceFieldVal_)+&IDsCount(Cls_, $1InstanceFieldVal_))*(1+20*InConstructorMethod)*(1+100*(extendsSprClsA+extendsSprClsB))+TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1StaticFieldVal_)*IsMethodObjArg+MethodIsInstance*10*TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1InstanceFieldVal_)*IsMethodObjArg )
        #SET booleanExprDepth=booleanExprDepth+1
        `( ` @REUSE_ID_$1_VAR_OR_VAL ` ` @OP_$1$1_bool ` ` @$1_EXPRESSION ` )`
    #SET booleanExprDepth=booleanExprDepth+-1
    #END_RULE
    //#BEGIN_RULE:2*(booleanExprMaxDepth+-1*booleanExprDepth)
    #BEGIN_RULE:2*(booleanExprMaxDepth+-1*booleanExprDepth)*(&IDsCount($1Var_)+&IDsCount($1$2FieldVar_)+&IDsCount(Cls_, $1$2FieldVar_)+MethodIsInstance*(&IDsCount($1InstanceFieldVar_)+&IDsCount(Cls_, $1InstanceFieldVar_))*(1+20*InConstructorMethod)*(1+100*(extendsSprClsA+extendsSprClsB))+TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1StaticFieldVar_)*IsMethodObjArg+MethodIsInstance*10*TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1InstanceFieldVar_)*IsMethodObjArg+&IDsCount($1Val_)+&IDsCount($1$2FieldVal_)+&IDsCount(Cls_, $1$2FieldVal_)+MethodIsInstance*(&IDsCount($1InstanceFieldVal_)+&IDsCount(Cls_, $1InstanceFieldVal_))*(1+20*InConstructorMethod)*(1+100*(extendsSprClsA+extendsSprClsB))+TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1StaticFieldVal_)*IsMethodObjArg+MethodIsInstance*10*TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1InstanceFieldVal_)*IsMethodObjArg)
//    #BEGIN_RULE:2*(booleanExprMaxDepth+-1*booleanExprDepth)*(&IDsCount($1Var_)+&IDsCount($1$2FieldVar_)+&IDsCount(Cls_, $1$2FieldVar_)+MethodIsInstance*(&IDsCount($1InstanceFieldVar_)+&IDsCount(Cls_, $1InstanceFieldVar_))*(1+20*InConstructorMethod)*(1+100*(extendsSprClsA+extendsSprClsB))+TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1StaticFieldVar_)*IsMethodObjArg+MethodIsInstance*10*TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1InstanceFieldVar_)*IsMethodObjArg + &IDsCount($1Val_)+&IDsCount($1$2FieldVal_)+&IDsCount(Cls_, $1$2FieldVal_)+MethodIsInstance*(&IDsCount($1InstanceFieldVal_)+&IDsCount(Cls_, $1InstanceFieldVal_))*(1+20*InConstructorMethod)*(1+100*(extendsSprClsA+extendsSprClsB))+TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1StaticFieldVal_)*IsMethodObjArg+MethodIsInstance*10*TestClass*extendsSprClsB*&IDsCount(SprClsB_, $1InstanceFieldVal_)*IsMethodObjArg )
        #SET booleanExprDepth=booleanExprDepth+1
        `( ` @$1_EXPRESSION ` ` @OP_$1$1_bool ` ` @REUSE_ID_$1_VAR_OR_VAL ` )`
    #SET booleanExprDepth=booleanExprDepth+-1
    #END_RULE
    #BEGIN_RULE:2
        `( ` @$1_EXPRESSION_NOT_RECURSIVE @OP_$1$1_bool @$1_EXPRESSION_NOT_RECURSIVE ` )`
    #END_RULE


@BIN_EXPR_$1$1_Boolean
    #BEGIN_RULE:1
        @BIN_EXPR_$1$1_boolean
    #END_RULE


@boolean_EXPRESSION_RECURSIVE
   #APPEND_RULE:(&IDsCount($1ArrayListVar_)+&IDsCount($1ArrayListVal_)+&IDsCount($1ArrayListFieldVar_)+&IDsCount($1ArrayListFieldVal_))*(1-$1IsPrimitiveType)
       #REUSE_ID $1ArrayList%_ `.contains(` @$1_EXPRESSION  `)`
    #END_RULE
   #APPEND_RULE:(&IDsCount($1LinkedListVar_)+&IDsCount($1LinkedListVal_)+&IDsCount($1LinkedListFieldVar_)+&IDsCount($1LinkedListFieldVal_))*(1-$1IsPrimitiveType)
       #REUSE_ID $1LinkedList%_ `.contains(` @$1_EXPRESSION  `)`
    #END_RULE

@int_EXPRESSION_RECURSIVE
   #APPEND_RULE:(&IDsCount($1ArrayListVar_)+&IDsCount($1ArrayListVal_)+&IDsCount($1ArrayListFieldVar_)+&IDsCount($1ArrayListFieldVal_))*(1-$1IsPrimitiveType)*ArrayListWeight
       #REUSE_ID $1ArrayList%_ `.indexOf(` @$1_EXPRESSION  `)`
    #END_RULE
   #APPEND_RULE:(&IDsCount($1ArrayListVar_)+&IDsCount($1ArrayListVal_)+&IDsCount($1ArrayListFieldVar_)+&IDsCount($1ArrayListFieldVal_))*(1-$1IsPrimitiveType)*ArrayListWeight
       #REUSE_ID $1ArrayList%_ `.lastIndexOf(` @$1_EXPRESSION  `)`
    #END_RULE
   #APPEND_RULE:(&IDsCount($1LinkedListVar_)+&IDsCount($1LinkedListVal_)+&IDsCount($1LinkedListFieldVar_)+&IDsCount($1LinkedListFieldVal_))*(1-$1IsPrimitiveType)*LinkedListWeight
       #REUSE_ID $1LinkedList%_ `.indexOf(` @$1_EXPRESSION  `)`
    #END_RULE
   #APPEND_RULE:(&IDsCount($1LinkedListVar_)+&IDsCount($1LinkedListVal_)+&IDsCount($1LinkedListFieldVar_)+&IDsCount($1LinkedListFieldVal_))*(1-$1IsPrimitiveType)*LinkedListWeight
       #REUSE_ID $1LinkedList%_ `.lastIndexOf(` @$1_EXPRESSION  `)`
    #END_RULE

