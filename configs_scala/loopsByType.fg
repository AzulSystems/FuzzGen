#INCLUDE "configs_scala/expressions.fg" 

#SET MaxArrayCount=1000

@STATEMENTS
@STATEMENT
@STATEMENTS_WITH_ACCESS_ARRAY_BY_LOOP_INDUCTION_VAR
       
@LOOP_CNT_UPPER_LIMIT
@LOOP_CNT_LOWER_LIMIT
@LOOP_CNT_LOWER_LIMIT_ARRAY_SAFE
@LOOP_CNT_LOWER_LIMIT_NOT_ARRAY_SAFE
@LOOP_CONDITION
@LOOP_RANGE_STEP
@LOOP_RANGE_STEP_NEG
@TO_OR_UNTIL
@LOOP_RANGE_ARRAY_SAFE
@LOOP_RANGE
@LOOP_RANGE_ARRAY_SAFE_SET
@LOOP_RANGE_ARRAY_SAFE_LIST
@FOR_LOOP_ARRAY_UNSAFE
@FOR_WITH_BREAK

@ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR
    #BEGIN_RULE:100*IntValDeclared
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `( ` #REUSE_LOCAL_ID IntVal_ ` + ` @[0:5]  ` ) `
    #END_RULE
    #BEGIN_RULE:1
        @REUSE_ID_$1_ARRAY_VAR_OR_VAL `( 0 )`
    #END_RULE



@SINGLE_STATEMENT_WITH_ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR
    #BEGIN_RULE:5
        @STATEMENT
    #END_RULE 
    #BEGIN_RULE:5*($1ArrayVarDeclared+$1ArrayValDeclared)
        @ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR ` = ` @$1_EXPRESSION
    #END_RULE 
    #BEGIN_RULE:5*($1ArrayVarDeclared+$1ArrayValDeclared)*$1VarDeclared
        @REUSE_ID_$1_VAR ` = ` @ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR
    #END_RULE 

@STATEMENTS_WITH_ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR
    #BEGIN_RULE:3
        @SINGLE_STATEMENT_WITH_ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR \n @STATEMENTS_WITH_ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR
    #END_RULE 
    #BEGIN_RULE:2
    #END_RULE 

@DECLARE_$1_IND_VAR
#BEGIN_RULE
        #SET $1IndVarDeclared=$1IndVarDeclared+1
        ` var ` @DECLARE_ID_$1_IND_VAR ` :  $1  = ` @$1_CONSTANT @$1_CONSTANT_SUFFIX ` `  \n
#END_RULE

@DECLARE_LAZY_$1_IND_VAR
#BEGIN_RULE
        ` var ` @DECLARE_LAZY_ID_$1_IND_VAR ` :  $1  = ` @$1_CONSTANT @$1_CONSTANT_SUFFIX ` `  \n
        #SET $1IndVarDeclared=$1IndVarDeclared+1
#END_RULE



        @DECLARE_ID_$1_IND_VAR
#BEGIN_RULE
#CREATE_ID $1IndVar_
#END_RULE

@DECLARE_LAZY_ID_$1_IND_VAR
#BEGIN_RULE
#CREATE_LAZY_ID $1IndVar_
#END_RULE


        @REUSE_ID_$1_IND_VAR
#BEGIN_RULE
#REUSE_ID $1IndVar_
#END_RULE



@FOR_LOOP_INNER
    #APPEND_RULE:100*$1VarDeclared*($1ArrayVarDeclared+$1ArrayValDeclared)
        ` for ( ` #BEGIN_SCOPE #CREATE_ID IntIndVal_ ` <- ` @LOOP_RANGE_ARRAY_SAFE ` ) { ` \n 
            #BEGIN_SCOPE 
            ` val ` #CREATE_ID IntVal_ ` = ` #REUSE_ID IntIndVal_ \n
            #SET IntValDeclared=IntValDeclared+1
            @REUSE_ID_$1_VAR ` += ` @$1_CONSTANT @$1_CONSTANT_SUFFIX ` + ` @ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR \n
            @STATEMENTS_WITH_ACCESS_ARRAY_BY_LOOP_INDUCTION_VAR
            @REUSE_ID_$1_VAR ` += ` @$1_CONSTANT @$1_CONSTANT_SUFFIX ` + ` @REUSE_ID_$1_ARRAY_VAR `( ` #REUSE_ID IntVal_ ` ) + ` #REUSE_LOCAL_ID IntVal_  \n \n 
        #SET IntValDeclared=IntValDeclared+-1
        #END_SCOPE \n  
        #END_SCOPE \n 
        ` } ` \n
    #END_RULE

@FOR_LOOP_YIELD_$1
    #BEGIN_RULE:1
        ` for ( `
        #BEGIN_SCOPE
        @DECLARE_LAZY_ID_Int_VAL ` <- ` @LOOP_RANGE
        #REGISTER_LAZY_IDS
        #SET IntValDeclared=IntValDeclared+1
        @LOOP_CONDITION ` ) yield { ` \n @$1_EXPRESSION
        #SET IntValDeclared=IntValDeclared+-1
        #END_SCOPE
    \n `} `\n
#END_RULE
 #BEGIN_RULE:1*$1ArrayVarDeclared
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_Int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE
        #SET IntValDeclared=IntValDeclared+1
        #REGISTER_LAZY_IDS @LOOP_CONDITION ` ) yield { ` \n  @ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR \n 
        #SET IntValDeclared=IntValDeclared+-1
        #END_SCOPE 
        \n `} `\n
#END_RULE

@FOR_LOOP_YIELD_LIST_$1
#BEGIN_RULE:1
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_Int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE_LIST 
        #REGISTER_LAZY_IDS  
        #SET IntValDeclared=IntValDeclared+1
        @LOOP_CONDITION ` ) yield { ` \n @$1_EXPRESSION 
        #SET IntValDeclared=IntValDeclared+-1
        #END_SCOPE 
        \n `} `\n
#END_RULE
#BEGIN_RULE:1*$1ArrayVarDeclared
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_Int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE_LIST
        #SET IntValDeclared=IntValDeclared+1
        #REGISTER_LAZY_IDS @LOOP_CONDITION ` ) yield { ` \n  @ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR \n 
        #SET IntValDeclared=IntValDeclared+-1
        #END_SCOPE 
        \n `} `\n
#END_RULE


@FOR_LOOP_YIELD_SET_$1
#BEGIN_RULE:1
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_Int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE_SET 
        #REGISTER_LAZY_IDS  
        #SET IntValDeclared=IntValDeclared+1
        @LOOP_CONDITION ` ) yield { ` \n @$1_EXPRESSION 
        #SET IntValDeclared=IntValDeclared+-1
        #END_SCOPE 
        \n `} `\n
#END_RULE
#BEGIN_RULE:1*$1ArrayVarDeclared
        ` for ( ` 
        #BEGIN_SCOPE 
        @DECLARE_LAZY_ID_Int_VAL ` <- ` @LOOP_RANGE_ARRAY_SAFE_SET
        #SET IntValDeclared=IntValDeclared+1
        #REGISTER_LAZY_IDS @LOOP_CONDITION ` ) yield { ` \n  @ACCESS_$1_ARRAY_BY_LOOP_INDUCTION_VAR \n 
        #SET IntValDeclared=IntValDeclared+-1
        #END_SCOPE 
       \n `} `\n
#END_RULE

@TRY_CATCH_LOOP_WITH_ARRAY
#APPEND_RULE:$1VarDeclared
        //@REUSE_ID_$1_VAR 
        //` = ` 
        `try { ` \n
            @FOR_LOOP_ARRAY_UNSAFE
            @$1_EXPRESSION \n
            ` } catch { ` \n
             `     case ex : ArrayIndexOutOfBoundsException => { ` @$1_EXPRESSION ` } ` \n
            ` } ` \n
#END_RULE


@TRY_BREAKABLE_BLOCK
#APPEND_RULE:$1VarDeclared
            @REUSE_ID_$1_VAR `= scala.util.control.Breaks.tryBreakable { ` \n
            #SET IntValDeclared=IntValDeclared+1
                @FOR_WITH_BREAK \n
            #SET IntValDeclared=IntValDeclared+-1
                    @Int_EXPRESSION \n
                    `} catchBreak { ` \n
                        @Int_EXPRESSION \n
                            `}` \n
#END_RULE

